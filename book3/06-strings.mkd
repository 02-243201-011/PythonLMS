Strings
=======

A string is a sequence
----------------------

\index{sequence}
\index{character}
\index{bracket operator}
\index{operator!bracket}

A string is a *sequence* of characters. You can access
the characters one at a time with the bracket operator:

~~~~ {.python}
>>> fruit = 'banana'
>>> letter = fruit[1]
~~~~

\index{index}
\index{}

The second statement extracts the character at index position 1 from the
`fruit` variable and assigns it to the `letter`
variable.

The expression in brackets is called an *index*. The
index indicates which character in the sequence you want (hence the
name).

But you might not get what you expect:

~~~~ {.python}
>>> print(letter)
a
~~~~

For most people, the first letter of "banana" is "b", not
"a". But in Python, the index is an offset from the beginning
of the string, and the offset of the first letter is zero.

~~~~ {.python}
>>> letter = fruit[0]
>>> print(letter)
b
~~~~

So "b" is the 0th letter ("zero-th") of "banana",
"a" is the 1th letter ("one-th"), and "n" is the
2th ("two-th") letter.

![String Indexes](height=0.75in@../images/string)

\index{index!starting at zero}
\index{zero, index starting at}

You can use any expression, including variables and operators, as an
index, but the value of the index has to be an integer. Otherwise you
get:

\index{index}
\index{}
\index{exception!TypeError}
\index{TypeError}

~~~~ {.python}
>>> letter = fruit[1.5]
TypeError: string indices must be integers
~~~~

Getting the length of a string using `len`
-----------------------------------------------------

\index{len function}
\index{function!len}

`len` is a built-in function that returns the number of
characters in a string:

~~~~ {.python}
>>> fruit = 'banana'
>>> len(fruit)
6
~~~~

To get the last letter of a string, you might be tempted to try
something like this:

\index{exception!IndexError}
\index{IndexError}

~~~~ {.python}
>>> length = len(fruit)
>>> last = fruit[length]
IndexError: string index out of range
~~~~

The reason for the `IndexError` is that there is no letter in
"banana" with the index 6. Since we started counting at
zero, the six letters are numbered 0 to 5. To get the last character,
you have to subtract 1 from `length`:

~~~~ {.python}
>>> last = fruit[length-1]
>>> print(last)
a
~~~~

Alternatively, you can use negative indices, which count backward from
the end of the string. The expression `fruit[-1]` yields the
last letter, `fruit[-2]` yields the second to last, and so
on.

\index{index!negative}
\index{negative index}

Travessia (traversal) de strings usando loop
--------------------------------------------

\index{traversal}
\index{loop!traversal}
\index{for loop}
\index{loop!for}
\index{statement!for}
\index{traversal}

Muito em computação envolve o processamento de strings um caractere por vez. Geralmente começando pelo primeiro caractere da string, seleciona-se um por vez, alguma operação é realizada sobre ele e o processo é repetido até o fim da string. Esse modelo de processamento é chamado de *travessia (traversal)*. Uma forma de escrever uma travessia é através de um loop `while`.

~~~~ {.python}
indice = 0
while indice < len(fruta):
    letra = fruta[indice]
    print(letra)
    indice = indice + 1
~~~~

Este loop atravessa a string e imprime cada letra em uma linha diferente. A condição do loop é `indice < len(fruta)`, então quando `indice` é igual ao tamanho da string, a condição é falsa, e o corpo do loop não é executado. O último caractere acessado é o que possui o índice `len(fruit)-1`, que é o último caractere da string.

**Exercício 1: Escreva um loop `while` que inicia no último caractere da string e caminha para o primeiro caractere, imprimindo cada letra em uma linha separada.**

Outra forma de escrever uma travessia com um loop `for`:

~~~~ {.python}
for char in fruta:
    print(char)
~~~~

Cada vez que passa pelo loop, o próximo caractere da string é atribuído à variável `char`. O loop continua até o fim dos caracteres.

Partes de strings (Slice)
-------------------------

\index{slice operator}
\index{operator!slice}
\index{index!slice}
\index{string!slice}
\index{slice!string}

Um segmento de uma string é chamado *slice*. A seleção de um slice é similar a seleção de um caractere:

~~~~ {.python}
>>> s = 'Monty Python'
>>> print(s[0:5])
Monty
>>> print(s[6:12])
Python
~~~~

O operador retorna a parte da string que está entre os dois números, incluindo o primeiro número e excluindo o último.

Se você omitir o primeiro índice, o slice irá começar do início da string. Já se você omitir o segundo índice, o slice irá terminar no último caractere da string:

~~~~ {.python}
>>> fruta = 'banana'
>>> fruta[:3]
'ban'
>>> fruta[3:]
'ana'
~~~~

Se o primeiro índice foi maior ou igual ao segundo índice, o resultado será uma *string vazia*, representada por duas aspas:

\index{aspas}

~~~~ {.python}
>>> fruta = 'banana'
>>> fruta[3:3]
''
~~~~

Uma string vazia não contém nenhum caractere e possui length 0, mas fora isso, é como qualquer outra string.

**Exercício 2: Dado que `fruta` é uma string, qual o resultado de `fruta[:]`?**

\index{copy!slice}
\index{slice!copy}

Strings are immutable
---------------------

\index{mutability}
\index{immutability}
\index{string!immutable}

It is tempting to use the operator on the left side of an assignment,
with the intention of changing a character in a string. For example:

\index{TypeError}
\index{exception!TypeError}

~~~~ {.python}
>>> greeting = 'Hello, world!'
>>> greeting[0] = 'J'
TypeError: 'str' object does not support item assignment
~~~~

The "object" in this case is the string and the "item" is the character
you tried to assign. For now, an *object* is the same
thing as a value, but we will refine that definition later. An
*item* is one of the values in a sequence.

\index{object}
\index{item assignment}
\index{assignment!item}
\index{immutability}

The reason for the error is that strings are *immutable*,
which means you can't change an existing string. The best you can do is
create a new string that is a variation on the original:

~~~~ {.python}
>>> greeting = 'Hello, world!'
>>> new_greeting = 'J' + greeting[1:]
>>> print(new_greeting)
Jello, world!
~~~~

This example concatenates a new first letter onto a slice of
`greeting`. It has no effect on the original string.

\index{concatenation}

Looping and counting
--------------------

\index{counter}
\index{counting and looping}
\index{looping and counting}
\index{looping!with strings}

The following program counts the number of times the letter
"a" appears in a string:

~~~~ {.python}
word = 'banana'
count = 0
for letter in word:
    if letter == 'a':
        count = count + 1
print(count)
~~~~

This program demonstrates another pattern of computation called a
*counter*. The variable `count` is initialized
to 0 and then incremented each time an "a" is found. When the
loop exits, `count` contains the result: the total number of
a's.

\index{encapsulation}

**Exercise 3: Encapsulate this code in a function named `count`, and
generalize it so that it accepts the string and the letter as arguments.**

O Operador `in`
----------------------------

\index{operador in}
\index{operador!in}
\index{operador booleano}
\index{operador!booleano}

A palavra `in` é uma operador booleano que usa duas strings e retorna `True` se a primeira aparecer como substring na segunda:

~~~~ {.python}
>>> 'a' in 'banana'
True
>>> 'semente' in 'banana'
False
~~~~

Comparação de string
-----------------

\index{string!comparação}
\index{comparação!string}

Os operadores de comparação trabalham em strings. Para observar se duas cadeias são iguais:

~~~~ {.python}
if palavra == 'banana':
    print('Certo, bananas.')
~~~~ 

Outras operações de comparação são úteis para organizar palavras em ordem alfabética:

~~~~ {.python}
if palavra < 'banana':
    print('Sua palavra,' + palavra + ', vem antes de banana.')
elif palavra > 'banana':
    print('Sua palavra,' + palavra + ', vem depois de banana.')
else:
    print('Certo, bananas.')
~~~~

O Python não manipula letras maiúsculas e minúsculas do mesmo modo que as pessoas. Assim, todas as letras maiúsculas vêm antes de todas as letras minúsculas, dessa forma:

~~~~
Sua palavra, Banana, vem antes de banana.
~~~~

Uma maneira comum de resolver esse problema é converter sequências de caracteres em um formato padrão, como todas as minúsculas, antes de executar a comparação. Tenha isso em mente caso você tenha que se defender contra um homem armado com uma Banana.

String methods
---------------------------

Strings are an example of Python *objects*. An object
contains both data (the actual string itself) and
*methods*, which are effectively functions that are built
into the object and are available to any *instance* of
the object.

Python has a function called `dir` which lists the methods
available for an object. The `type` function shows the type
of an object and the `dir` function shows the available
methods.

~~~~ {.python}
>>> stuff = 'Hello world'
>>> type(stuff)
<class 'str'>
>>> dir(stuff)
['capitalize', 'casefold', 'center', 'count', 'encode',
'endswith', 'expandtabs', 'find', 'format', 'format_map',
'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit',
'isidentifier', 'islower', 'isnumeric', 'isprintable',
'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower',
'lstrip', 'maketrans', 'partition', 'replace', 'rfind',
'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip',
'split', 'splitlines', 'startswith', 'strip', 'swapcase',
'title', 'translate', 'upper', 'zfill']
>>> help(str.capitalize)
Help on method_descriptor:

capitalize(...)
    S.capitalize() -> str

    Return a capitalized version of S, i.e. make the first character
    have upper case and the rest lower case.
>>>
~~~~

While the `dir` function lists the methods, and you can use
`help` to get some simple documentation on a method, a better
source of documentation for string methods would be
<https://docs.python.org/library/stdtypes.html#string-methods>.

Calling a *method* is similar to calling a function (it
takes arguments and returns a value) but the syntax is different. We call
a method by appending the method name to the variable name using the
period as a delimiter.

For example, the method `upper` takes a string and returns a
new string with all uppercase letters:

\index{method}
\index{string!method}

Instead of the function syntax `upper(word)`, it uses the
method syntax `word.upper()`.

\index{dot notation}

~~~~ {.python}
>>> word = 'banana'
>>> new_word = word.upper()
>>> print(new_word)
BANANA
~~~~

This form of dot notation specifies the name of the method,
`upper`, and the name of the string to apply the method to,
`word`. The empty parentheses indicate that this method takes
no argument.

\index{parentheses!empty}

A method call is called an *invocation*; in this case, we
would say that we are invoking `upper` on the
`word`.

\index{invocation}

For example, there is a string method named `find` that
searches for the position of one string within another:

~~~~ {.python}
>>> word = 'banana'
>>> index = word.find('a')
>>> print(index)
1
~~~~ 

In this example, we invoke `find` on `word` and
pass the letter we are looking for as a parameter.

The `find` method can find substrings as well as characters:

~~~~ {.python}
>>> word.find('na')
2
~~~~

It can take as a second argument the index where it should start:

\index{optional argument}
\index{argument!optional}

~~~~ {.python}
>>> word.find('na', 3)
4
~~~~

One common task is to remove white space (spaces, tabs, or newlines)
from the beginning and end of a string using the `strip`
method:

~~~~ {.python}
>>> line = '  Here we go  '
>>> line.strip()
'Here we go'
~~~~

Some methods such as *startswith* return boolean values.

~~~~ {.python}
>>> line = 'Have a nice day'
>>> line.startswith('Have')
True
>>> line.startswith('h')
False
~~~~

You will note that `startswith` requires case to match, so
sometimes we take a line and map it all to lowercase before we do any
checking using the `lower` method.

~~~~ {.python}
>>> line = 'Have a nice day'
>>> line.startswith('h')
False
>>> line.lower()
'have a nice day'
>>> line.lower().startswith('h')
True
~~~~

In the last example, the method `lower` is called and then we
use `startswith` to see if the resulting lowercase string
starts with the letter "h". As long as we are careful with the order, we
can make multiple method calls in a single expression.

\index{count method}
\index{method!count}

**Exercise 4: There is a string method called `count` that is similar to
the function in the previous exercise. Read the documentation of this
method at:

<https://docs.python.org/library/stdtypes.html#string-methods> 

Write an invocation that counts the number of times the letter a occurs
in "banana".**

Particionando strings
---------------

Frequentemente, nós precisamos analisar o que temos dentro de uma string e encontrar uma substring.
Por exemplo se nos for apresentado a sequência formatados a seguir:

`From stephen.marquard@`*` uct.ac.za`*` Sat Jan  5 09:14:16 2008`

e nós quisermos desconsiderar somente a segunda metade do endereço (i.e.,`uct.ac.za`)
de cada linha, nó podemos fazer isso utilizando o 
método(a função?) `find` e o fatiamento de strings.

Primeiramente, acharemos a posição do sinal arroba (@) na string.
Então acharemos a posição do primeiro espaço *após* o arroba.
Só então utilizaremos o fatiamento de strings para extrair a parte da string que estamos buscando.

~~~~ {.python}
>>> data = 'From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008'
>>> atpos = data.find('@')
>>> print(atpos)
21
>>> sppos = data.find(' ',atpos)
>>> print(sppos)
31
>>> host = data[atpos+1:sppos]
>>> print(host)
uct.ac.za
>>>
~~~~

Utilizamos a versão do método (da função?) `find` que nos permite
especificar a posição na string que queremos `find`(encontrar) para
começar a busca. Quando fatiamos a string, extraímos os caracteres de
"um afrente do sinal arroba até o ,*mas não incluindo*, o caractere espaço".

A documentação para o método(a função) `find` está disponível em

<https://docs.python.org/library/stdtypes.html#string-methods>.

Format operator
---------------

\index{format operator}
\index{operator!format}

The *format operator*, `%` allows us to
construct strings, replacing parts of the strings with the data stored
in variables. When applied to integers, `%` is the modulus
operator. But when the first operand is a string, `%` is the
format operator.

\index{format string}

The first operand is the *format string*, which contains
one or more *format sequences* that specify how the
second operand is formatted. The result is a string.

\index{format sequence}

For example, the format sequence `%d` means that the second operand
should be formatted as an integer ("d" stands for "decimal"):

~~~~ {.python}
>>> camels = 42
>>> '%d' % camels
'42'
~~~~

The result is the string '42', which is not to be confused with the
integer value 42.

A format sequence can appear anywhere in the string, so you can embed a
value in a sentence:

~~~~ {.python}
>>> camels = 42
>>> 'I have spotted %d camels.' % camels
'I have spotted 42 camels.'
~~~~

If there is more than one format sequence in the string, the second
argument has to be a tuple^[A tuple is a sequence of comma-separated 
values inside a pair of parenthesis. We will cover tuples in Chapter 10].
Each format sequence is matched with an
element of the tuple, in order.

The following example uses `%d` to format an integer, `%g` to format
a floating-point number (don't ask why), and `%s` to format a string:

~~~~ {.python}
>>> 'In %d years I have spotted %g %s.' % (3, 0.1, 'camels')
'In 3 years I have spotted 0.1 camels.'
~~~~

The number of elements in the tuple must match the number of format
sequences in the string. The types of the elements also must match the
format sequences:

\index{exception!TypeError}
\index{TypeError}

~~~~ {.python}
>>> '%d %d %d' % (1, 2)
TypeError: not enough arguments for format string
>>> '%d' % 'dollars'
TypeError: %d format: a number is required, not str
~~~~

In the first example, there aren't enough elements; in the second, the
element is the wrong type.

The format operator is powerful, but it can be difficult to use. You can
read more about it at

<https://docs.python.org/library/stdtypes.html#printf-style-string-formatting>.

Debugging
---------

\index{debugging}

Uma habilidade que você deveria desenvolver ao programar é a de sempre
se perguntar, "O que poderia dar errado aqui?" ou, de maneira semelhante, "Qual loucura o usuário poderia fazer para gerar um problema
no nosso (aparentemente) programa perfeito?"

Por exemplo, observe o programa que utilizamos para dmeonstrar o laço `while` no capítulo de iterações:

\VerbatimInput{../code3/copytildone2.py}

Observe o que acontece quando o usuário introduz uma linha vazia na entrada:

~~~~ {.python}
> hello there
hello there
> # don't print this
> print this!
print this!
>
Traceback (most recent call last):
  File "copytildone.py", line 3, in <module>
    if line[0] == '#':
IndexError: string index out of range
~~~~

O código funciona bem até o aparecimento da linha vazia. Então não há o caractere da posição 0, logo temos um traceback (erro).
Existem duas soluções para transformar a linha três em uma linha segura, mesmo que a linha esteja vazia.

Uma alternativa seria simplesmente utilizar o método (a função?) `startswith` 
que retorna `False` se a string estiver vazia.

~~~~ {.python}
if line.startswith('#'):
~~~~

\index{guardian pattern}
\index{pattern!guardian}

Outra forma é a de assegurar escrevendo uma instrunção `if` utilizando um *guardian* pattern e tenha certeza de que a segunda
expressão lógica será testada apenas se a string conter no mínimo 1 caractere:

~~~~ {.python}
if len(line) > 0 and line[0] == '#':
~~~~

Glossário
--------

contador
:   Uma variável que é utilizada para contar algo. Geralmente é inicializada com zero e incrementada\index{contador}

string vazia 
:   Uma string com nenhum caractere e de dimensão 0, representada por duas aspas.
\index{string vazia}

operador de formatação
:   Um operador,`%`, que recebe o formato da string e uma enupla e gera uma string que inclui os elementos de uma enupla e formatados como especificados pela string.
\index{Operador de formatação}
\index{Operador!formatação}

sequencia de formatação
:   Uma sequencia de caracteres em uma string de formatação, como `%d`, que especificam como um valor é formatadao
\index{sequencia de formatação}

string de formatação
:   Uma string, utilizada com o operador de formatação, que contém a sequência de formatação.
\index{string de formatação}

flag
:   Uma variável boleana utilizada para indicar quando uma condição é verdadeira ou falsa.
\index{flag}

invocação
:   Uma declaração que chama um método.
\index{invocação}

imutável
:   A propriedade de uma sequência na qual os items não podem ser atribuídos
\index{imutabilidade}

index
:   Um valor inteiro utilizado para selecionar um item em uma sequencia, como um caractere em uma string.
\index{index}
\index{}

item
:   Um dos valores em uma sequencia.
\index{item}

método
:   Uma função que é associada a um objeto e chamada utilizando uma notação com um ponto.
\index{método}

objeto
:   Algo que uma variável pode se referir. Até o momento, você pode utilizar "objeto" e "valor" indistintamente.
\index{objeto}

pesquisa
:   Um padrão de travessia que para quando encontra o que estava procurando.

\index{padrão de pesquisa}
\index{padrão!pesquisa}

sequencia
:   Um conjunto ordenado; ou seja, um conjunto de valores os quais são identificados
por um index inteiro.
\index{sequencia}

fatia
:   Uma parte de uma string specificado por uma intervalo de índices.
\index{fatia}

travessia
:   Iterar através dos elementos de uma sequencia, realizando uma operação similar em cada um deles.
\index{travessia}

Exercícios
---------

**Exercício 5: Utilize o seguinte código em Python que guarda uma string:**

`str = 'X-DSPAM-Confidence: `**`0.8475`**`'`
**Use a função `find` e o corte de strings para extrair a porção da string depois do sinal de dois pontos
e se a funçaõ `float` para converter a string extraída em um número de ponto flutuante.**

\index{métodos de string}
\index{métodos!string}

**Exercícios 6: Leia a documentação dos métodos de string em
<https://docs.python.org/library/stdtypes.html#string-methods>
Você pode querer experimentar alguns deles para ter certeza que você entendeu como eles funcionam. `strip` e `replace` são particularmente úteis.**

**A documentação utiliza uma sintaxe que pode ser confusa. Por exemplo, em 
`find(sub[, start[, end]])`, as chaves indicam argumentos opcionais, então, `sub` é necessário, mas `start` é opcional e se você incluir `start`, logo `end` é opcional.**


Strings
=======

A string is a sequence
----------------------

\index{sequence}
\index{character}
\index{bracket operator}
\index{operator!bracket}

A string is a *sequence* of characters. You can access
the characters one at a time with the bracket operator:

~~~~ {.python}
>>> fruit = 'banana'
>>> letter = fruit[1]
~~~~

\index{index}
\index{}

The second statement extracts the character at index position 1 from the
`fruit` variable and assigns it to the `letter`
variable.

The expression in brackets is called an *index*. The
index indicates which character in the sequence you want (hence the
name).

But you might not get what you expect:

~~~~ {.python}
>>> print(letter)
a
~~~~

For most people, the first letter of "banana" is "b", not
"a". But in Python, the index is an offset from the beginning
of the string, and the offset of the first letter is zero.

~~~~ {.python}
>>> letter = fruit[0]
>>> print(letter)
b
~~~~

So "b" is the 0th letter ("zero-th") of "banana",
"a" is the 1th letter ("one-th"), and "n" is the
2th ("two-th") letter.

![String Indexes](height=0.75in@../images/string)

\index{index!starting at zero}
\index{zero, index starting at}

You can use any expression, including variables and operators, as an
index, but the value of the index has to be an integer. Otherwise you
get:

\index{index}
\index{}
\index{exception!TypeError}
\index{TypeError}

~~~~ {.python}
>>> letter = fruit[1.5]
TypeError: string indices must be integers
~~~~

Getting the length of a string using `len`
-----------------------------------------------------

\index{len function}
\index{function!len}

`len` is a built-in function that returns the number of
characters in a string:

~~~~ {.python}
>>> fruit = 'banana'
>>> len(fruit)
6
~~~~

To get the last letter of a string, you might be tempted to try
something like this:

\index{exception!IndexError}
\index{IndexError}

~~~~ {.python}
>>> length = len(fruit)
>>> last = fruit[length]
IndexError: string index out of range
~~~~

The reason for the `IndexError` is that there is no letter in
"banana" with the index 6. Since we started counting at
zero, the six letters are numbered 0 to 5. To get the last character,
you have to subtract 1 from `length`:

~~~~ {.python}
>>> last = fruit[length-1]
>>> print(last)
a
~~~~

Alternatively, you can use negative indices, which count backward from
the end of the string. The expression `fruit[-1]` yields the
last letter, `fruit[-2]` yields the second to last, and so
on.

\index{index!negative}
\index{negative index}

Travessia (traversal) de strings usando loop
--------------------------------------------

\index{traversal}
\index{loop!traversal}
\index{for loop}
\index{loop!for}
\index{statement!for}
\index{traversal}

Muito em computação envolve o processamento de strings um caractere por vez. Geralmente começando pelo primeiro caractere da string, seleciona-se um por vez, alguma operação é realizada sobre ele e o processo é repetido até o fim da string. Esse modelo de processamento é chamado de *travessia (traversal)*. Uma forma de escrever uma travessia é através de um loop `while`.

~~~~ {.python}
indice = 0
while indice < len(fruta):
    letra = fruta[indice]
    print(letra)
    indice = indice + 1
~~~~

Este loop atravessa a string e imprime cada letra em uma linha diferente. A condição do loop é `indice < len(fruta)`, então quando `indice` é igual ao tamanho da string, a condição é falsa, e o corpo do loop não é executado. O último caractere acessado é o que possui o índice `len(fruit)-1`, que é o último caractere da string.

**Exercício 1: Escreva um loop `while` que inicia no último caractere da string e caminha para o primeiro caractere, imprimindo cada letra em uma linha separada.**

Outra forma de escrever uma travessia com um loop `for`:

~~~~ {.python}
for char in fruta:
    print(char)
~~~~

Cada vez que passa pelo loop, o próximo caractere da string é atribuído à variável `char`. O loop continua até o fim dos caracteres.

Partes de strings (Slice)
-------------------------

\index{slice operator}
\index{operator!slice}
\index{index!slice}
\index{string!slice}
\index{slice!string}

Um segmento de uma string é chamado *slice*. A seleção de um slice é similar a seleção de um caractere:

~~~~ {.python}
>>> s = 'Monty Python'
>>> print(s[0:5])
Monty
>>> print(s[6:12])
Python
~~~~

O operador retorna a parte da string que está entre os dois números, incluindo o primeiro número e excluindo o último.

Se você omitir o primeiro índice, o slice irá começar do início da string. Já se você omitir o segundo índice, o slice irá terminar no último caractere da string:

~~~~ {.python}
>>> fruta = 'banana'
>>> fruta[:3]
'ban'
>>> fruta[3:]
'ana'
~~~~

Se o primeiro índice foi maior ou igual ao segundo índice, o resultado será uma *string vazia*, representada por duas aspas:

\index{aspas}

~~~~ {.python}
>>> fruta = 'banana'
>>> fruta[3:3]
''
~~~~

Uma string vazia não contém nenhum caractere e possui length 0, mas fora isso, é como qualquer outra string.

**Exercício 2: Dado que `fruta` é uma string, qual o resultado de `fruta[:]`?**

\index{copy!slice}
\index{slice!copy}

Strings are immutable
---------------------

\index{mutability}
\index{immutability}
\index{string!immutable}

It is tempting to use the operator on the left side of an assignment,
with the intention of changing a character in a string. For example:

\index{TypeError}
\index{exception!TypeError}

~~~~ {.python}
>>> greeting = 'Hello, world!'
>>> greeting[0] = 'J'
TypeError: 'str' object does not support item assignment
~~~~

The "object" in this case is the string and the "item" is the character
you tried to assign. For now, an *object* is the same
thing as a value, but we will refine that definition later. An
*item* is one of the values in a sequence.

\index{object}
\index{item assignment}
\index{assignment!item}
\index{immutability}

The reason for the error is that strings are *immutable*,
which means you can't change an existing string. The best you can do is
create a new string that is a variation on the original:

~~~~ {.python}
>>> greeting = 'Hello, world!'
>>> new_greeting = 'J' + greeting[1:]
>>> print(new_greeting)
Jello, world!
~~~~

This example concatenates a new first letter onto a slice of
`greeting`. It has no effect on the original string.

\index{concatenation}

Looping and counting
--------------------

\index{counter}
\index{counting and looping}
\index{looping and counting}
\index{looping!with strings}

The following program counts the number of times the letter
"a" appears in a string:

~~~~ {.python}
word = 'banana'
count = 0
for letter in word:
    if letter == 'a':
        count = count + 1
print(count)
~~~~

This program demonstrates another pattern of computation called a
*counter*. The variable `count` is initialized
to 0 and then incremented each time an "a" is found. When the
loop exits, `count` contains the result: the total number of
a's.

\index{encapsulation}

**Exercise 3: Encapsulate this code in a function named `count`, and
generalize it so that it accepts the string and the letter as arguments.**

O Operador `in`
----------------------------

\index{operador in}
\index{operador!in}
\index{operador booleano}
\index{operador!booleano}

A palavra `in` é uma operador booleano que usa duas strings e retorna `True` se a primeira aparecer como substring na segunda:

~~~~ {.python}
>>> 'a' in 'banana'
True
>>> 'semente' in 'banana'
False
~~~~

Comparação de string
-----------------

\index{string!comparação}
\index{comparação!string}

Os operadores de comparação trabalham em strings. Para observar se duas cadeias são iguais:

~~~~ {.python}
if palavra == 'banana':
    print('Certo, bananas.')
~~~~ 

Outras operações de comparação são úteis para organizar palavras em ordem alfabética:

~~~~ {.python}
if palavra < 'banana':
    print('Sua palavra,' + palavra + ', vem antes de banana.')
elif palavra > 'banana':
    print('Sua palavra,' + palavra + ', vem depois de banana.')
else:
    print('Certo, bananas.')
~~~~

O Python não manipula letras maiúsculas e minúsculas do mesmo modo que as pessoas. Assim, todas as letras maiúsculas vêm antes de todas as letras minúsculas, dessa forma:

~~~~
Sua palavra, Banana, vem antes de banana.
~~~~

Uma maneira comum de resolver esse problema é converter sequências de caracteres em um formato padrão, como todas as minúsculas, antes de executar a comparação. Tenha isso em mente caso você tenha que se defender contra um homem armado com uma Banana.

Métodos de Strings
---------------------------
Strings são exemplos de *objetos* no Phyton. Um objeto contém tanto a informação (a própria string), como *métodos*, que são funções eficientes as quais são construídas dentro do objeto e são disponíveis em qualquer *instância* do objeto.

Phyton tem a função chamada `dir` que lista os métodos disponíveis a este objeto. A função `type` mostra o tipo do objeto e a função `dir` mostra os métodos disponíveis.

~~~~ {.python}
>>> stuff = 'Hello world'
>>> type(stuff)
<class 'str'>
>>> dir(stuff)
['capitalize', 'casefold', 'center', 'count', 'encode',
'endswith', 'expandtabs', 'find', 'format', 'format_map',
'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit',
'isidentifier', 'islower', 'isnumeric', 'isprintable',
'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower',
'lstrip', 'maketrans', 'partition', 'replace', 'rfind',
'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip',
'split', 'splitlines', 'startswith', 'strip', 'swapcase',
'title', 'translate', 'upper', 'zfill']
>>> help(str.capitalize)
Help on method_descriptor:

capitalize(...)
    S.capitalize() -> str

    Return a capitalized version of S, i.e. make the first character
    have upper case and the rest lower case.
>>>
~~~~

Você pode usar o comando `help` para ter acesso a uma simples documentação sobre o método. Uma melhor fonte de documentação para métodos de strings pode ser encontrada em:  https://docs.python.org/library/stdtypes.html#string-methods.

Chamar um `método` é similar a chamar uma função (recebe argumentos e retorna um valor) mas a sintaxe é diferente. Nó chamamos um método anexando o nome do método ao nome da variável usando o ponto como delimitador.

Por exemplo, o método `upper` recebe a string e retorna uma nova string com todas as letras em maiúsculo:

\index{method}
\index{string!method}

Em vez da sintaxe da função `upper(word)`, é usado a sintaxe do método `word.upper()`.

\index{dot notation}

~~~~ {.python}
>>> word = 'banana'
>>> new_word = word.upper()
>>> print(new_word)
BANANA
~~~~

Esta forma, utilizando o ponto, especifica o nome do método, `upper`, e o nome da string em que o método está sendo utilizado, `word`. Os parênteses vazios indicam que o método não recebe argumento.

\index{parentheses!empty}

A chamada de um método é denotada por *invocação*. Nesse caso, nós devemos dizer que estamos invocando `upper` em `world`.

\index{invocation}

Por exemplo, existe um método para string chamado `find` que procura pela posição de uma string dentro de outra:

~~~~ {.python}
>>> word = 'banana'
>>> index = word.find('a')
>>> print(index)
1
~~~~ 

Nesse exemplo, invocamos `find` em `word` e passamos a letra que estamos procurando como argumento.

O método `find` pode encontrar substrings, assim como caracteres:

~~~~ {.python}
>>> word.find('na')
2
~~~~

O método pode receber como segundo argumento o índice onde deve começar:

\index{optional argument}
\index{argument!optional}

~~~~ {.python}
>>> word.find('na', 3)
4
~~~~

Uma prática comum consiste em remover espaços em branco (espaços, tabs ou quebra de linha) do começo e do final da string, usando o método `strip`:

~~~~ {.python}
>>> line = '  Here we go  '
>>> line.strip()
'Here we go'
~~~~

Alguns métodos como *startswith* retornam valores booleanos.

~~~~ {.python}
>>> line = 'Have a nice day'
>>> line.startswith('Have')
True
>>> line.startswith('h')
False
~~~~

Você vai notar que `startswith` requer caixa para combinar, então, às vezes, nós pegamos uma linha e a mapeamos toda em caixa baixa, usando o método `lower`, antes de fazer qualquer checagem.

~~~~ {.python}
>>> line = 'Have a nice day'
>>> line.startswith('h')
False
>>> line.lower()
'have a nice day'
>>> line.lower().startswith('h')
True
~~~~

Nesse último exemplo, o método `lower` é chamado e então nós usamos `startswith` para ver se o resultado da string em letras minúsculas começa com a letra "h". Enquanto tomarmos cuidado com a ordem, nós podemos chamar múltiplos métodos em uma simples expressão.

\index{count method}
\index{method!count}

**Exercício 4: Existe um método de string chamado `count` que é similar a função usada no exercício anterior. Leia a documentação desse método em:

<https://docs.python.org/library/stdtypes.html#string-methods> 

Escreva uma invocação que conta o números de vezes que a letra "a" aparece em "banana**

Parsing strings
---------------

Often, we want to look into a string and find a substring. For example
if we were presented a series of lines formatted as follows:

`From stephen.marquard@`*` uct.ac.za`*` Sat Jan  5 09:14:16 2008`

and we wanted to pull out only the second half of the address (i.e.,
`uct.ac.za`) from each line, we can do this by using the
`find` method and string slicing.

First, we will find the position of the at-sign in the string. Then we
will find the position of the first space *after* the at-sign. And then
we will use string slicing to extract the portion of the string which we
are looking for.

~~~~ {.python}
>>> data = 'From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008'
>>> atpos = data.find('@')
>>> print(atpos)
21
>>> sppos = data.find(' ',atpos)
>>> print(sppos)
31
>>> host = data[atpos+1:sppos]
>>> print(host)
uct.ac.za
>>>
~~~~

We use a version of the `find` method which allows us to
specify a position in the string where we want `find` to
start looking. When we slice, we extract the characters from "one beyond
the at-sign through up to *but not including* the space character".

The documentation for the `find` method is available at

<https://docs.python.org/library/stdtypes.html#string-methods>.

Operador de Formato
---------------

\index{format operator}
\index{operator!format}

O *operador de formato* `%` nos permite construir strings, substituindo partes destas strings pela informação contidas em variáveis. Quando aplicamos à inteiros, `%` é um operador de módulo. Porém, quando o primeiro operando é uma string, `%` é um operador de formato.

\index{format string}

O primeiro operando é o *string de formato*, que contém uma ou mais *sequências de formato* que especificam como o segundo operando é formatado. O resultado é uma string.

\index{format sequence}

Por exemplo, o formato de sequência `%d` significa que o segundo operando deve ter o formato de um inteiro ("d" significa "decimal"):

~~~~ {.python}
>>> camels = 42
>>> '%d' % camels
'42'
~~~~

O resultado é a string '42', que não é pra ser confundida com o inteiro de valor 42.

Uma sequência de formato pode aparecer em qualquer lugar dentro de uma string, no intuito de você alocar um valor em uma frase:

~~~~ {.python}
>>> camels = 42
>>> 'I have spotted %d camels.' % camels
'I have spotted 42 camels.'
~~~~

Se existe mais de uma sequência de formato em uma string, o segundo argumento tem que ser uma tupla ^[Uma tupla é uma sequência de valores separados por vírgulas dentro de um par de parênteses. Nós vamos tratar sobre tuplas no Capítulo 10]. Cada sequência de formato é combinada com um elemento da tupla, em ordem.

O seguinte exemplo usa `%d` para formatar um inteiro, `%g` para formatar um número de ponto flutuante (não pergunte o por que), e `%s` para formatar uma string:

~~~~ {.python}
>>> 'In %d years I have spotted %g %s.' % (3, 0.1, 'camels')
'In 3 years I have spotted 0.1 camels.'
~~~~

O número de elementos em uma tupla deve ser igual ao número de sequências de formato em uma string. Os tipos dos elementos também devem ser iguais aos tipos destas sequências:

\index{exception!TypeError}
\index{TypeError}

~~~~ {.python}
>>> '%d %d %d' % (1, 2)
TypeError: not enough arguments for format string
>>> '%d' % 'dollars'
TypeError: %d format: a number is required, not str
~~~~

No primeiro exemplo, não tem o número de elementos suficientes; no segundo, o elemento é de um outro tipo. 

O operador de formato é poderoso, mas pode ser difícil de se usar. Você pode ler mais sobre em:

<https://docs.python.org/library/stdtypes.html#printf-style-string-formatting>.

Debugging
---------

\index{debugging}

A skill that you should cultivate as you program is always asking
yourself, "What could go wrong here?" or alternatively, "What crazy
thing might our user do to crash our (seemingly) perfect program?"

For example, look at the program which we used to demonstrate the
`while` loop in the chapter on iteration:

\VerbatimInput{../code3/copytildone2.py}

Look what happens when the user enters an empty line of input:

~~~~ {.python}
> hello there
hello there
> # don't print this
> print this!
print this!
>
Traceback (most recent call last):
  File "copytildone.py", line 3, in <module>
    if line[0] == '#':
IndexError: string index out of range
~~~~

The code works fine until it is presented an empty line. Then there is
no zero-th character, so we get a traceback. There are two solutions to
this to make line three "safe" even if the line is empty.

One possibility is to simply use the `startswith` method
which returns `False` if the string is empty.

~~~~ {.python}
if line.startswith('#'):
~~~~

\index{guardian pattern}
\index{pattern!guardian}

Another way is to safely write the `if` statement using the
*guardian* pattern and make sure the second logical
expression is evaluated only where there is at least one character in
the string.:

~~~~ {.python}
if len(line) > 0 and line[0] == '#':
~~~~

Glossário
--------

contador
:   Uma variável que é utilizada para contar algo. Geralmente é inicializada com zero e incrementada\index{contador}

string vazia 
:   Uma string com nenhum caractere e de dimensão 0, representada por duas aspas.
\index{string vazia}

operador de formatação
:   Um operador,`%`, que recebe o formato da string e uma enupla e gera uma string que inclui os elementos de uma enupla e formatados como especificados pela string.
\index{Operador de formatação}
\index{Operador!formatação}

sequencia de formatação
:   Uma sequencia de caracteres em uma string de formatação, como `%d`, que especificam como um valor é formatadao
\index{sequencia de formatação}

string de formatação
:   Uma string, utilizada com o operador de formatação, que contém a sequência de formatação.
\index{string de formatação}

flag
:   Uma variável boleana utilizada para indicar quando uma condição é verdadeira ou falsa.
\index{flag}

invocação
:   Uma declaração que chama um método.
\index{invocação}

imutável
:   A propriedade de uma sequência na qual os items não podem ser atribuídos
\index{imutabilidade}

index
:   Um valor inteiro utilizado para selecionar um item em uma sequencia, como um caractere em uma string.
\index{index}
\index{}

item
:   Um dos valores em uma sequencia.
\index{item}

método
:   Uma função que é associada a um objeto e chamada utilizando uma notação com um ponto.
\index{método}

objeto
:   Algo que uma variável pode se referir. Até o momento, você pode utilizar "objeto" e "valor" indistintamente.
\index{objeto}

pesquisa
:   Um padrão de travessia que para quando encontra o que estava procurando.

\index{padrão de pesquisa}
\index{padrão!pesquisa}

sequencia
:   Um conjunto ordenado; ou seja, um conjunto de valores os quais são identificados
por um index inteiro.
\index{sequencia}

fatia
:   Uma parte de uma string specificado por uma intervalo de índices.
\index{fatia}

travessia
:   Iterar através dos elementos de uma sequencia, realizando uma operação similar em cada um deles.
\index{travessia}

Exercícios
---------

**Exercício 5: Utilize o seguinte código em Python que guarda uma string:**

`str = 'X-DSPAM-Confidence: `**`0.8475`**`'`
**Use a função `find` e o corte de strings para extrair a porção da string depois do sinal de dois pontos
e se a funçaõ `float` para converter a string extraída em um número de ponto flutuante.**

\index{métodos de string}
\index{métodos!string}

**Exercícios 6: Leia a documentação dos métodos de string em
<https://docs.python.org/library/stdtypes.html#string-methods>
Você pode querer experimentar alguns deles para ter certeza que você entendeu como eles funcionam. `strip` e `replace` são particularmente úteis.**

**A documentação utiliza uma sintaxe que pode ser confusa. Por exemplo, em 
`find(sub[, start[, end]])`, as chaves indicam argumentos opcionais, então, `sub` é necessário, mas `start` é opcional e se você incluir `start`, logo `end` é opcional.**


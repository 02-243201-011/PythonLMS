Dicionários
============

\index{dictionary}
\index{dictionary}

\index{type!dict}
\index{key}
\index{key-value pair}
\index{index}
\index{}

Um *dicionário* é como uma lista, porém mais geral.
Em uma lista, o índice de posição deve ser um inteiro;
em um dicionário, o índice pode ser de (quase) qualquer tipo.  

Você pode pensar em um dicionário como o mapeamento entre
um conjunto de índices (chamados de *chaves*) e um conjunto
de valores. Cada chave localiza um valor. A associação entre
uma chave e um valor é chamado de *par chave-valor* ou,
às vezes, de *item*. 

Como exemplo, vamos construir um dicionário que mapeia
palavras do Inglês para o Português, então os valores e
chaves são todos strings. 

A função `dict` cria um novo dicionário com nenhum item.
Como `dict` é o nome de uma função embutida, deve-se 
evitar usá-lo como nome de variável.


\index{dict function}
\index{function!dict}

~~~~ {.python .trinket}
>>> ing2port = dict()
>>> print(ing2port)
{}
~~~~

As chaves,  `{}`, representam um dicionário vazio. Para 
adicionar itens ao dicionário, colchetes, `[]`, podem ser
utilizados:

\index{squiggly bracket}
\index{bracket!squiggly}

~~~~ {.python}
>>>  ing2port['one'] = 'um' 
~~~~

Esta linha cria um item que localiza, a partir da chave
`‘one’`, o valor "um". Se pedirmos para o conteúdo do 
dicionário ser mostrado novamente, veremos o par chave-valor
com dois-pontos entre a chave e o valor:

~~~~ {.python}
>>> print(ing2port) 
{'one': 'um'}
~~~~

Este formato de saída também é um formato de entrada. 
Por exemplo, um dicionário pode ser criado com três itens.
Contudo, se `ing2port` for mostrado, você pode se surpreender:

~~~~ {.python}
>>> ing2port = {'one': 'um', 'two': 'dois', 'three': 'três'} 
>>> print(ing2port)
{'one': 'um', 'three': 'três', 'two': 'dois'}
~~~~

A ordem dos pares chave-valor não é a mesma. Na verdade,
se o mesmo exemplo for executado em seu computador, o
resultado pode ser diferente. Em geral, a ordem dos itens
em um dicionário é imprevisível.

Contudo, isso não é um problema já que os elementos em 
um dicionário nunca são indexados usando inteiros como 
índice. Ao invés disso, chaves são utilizadas para 
consultar os valores correspondentes:

~~~~ {.python}
>>> print(ing2port['two'])
'dois'
~~~~

A chave `'two'` sempre localizará o valor ‘dois’ e,
portanto, a ordem dos itens não importa.

Se a chave não estiver contida no dicionário, ocorrerá um erro:

\index{exception!KeyError}
\index{KeyError}

~~~~ {.python}
>>> print(ing2port['four'])
KeyError: 'four'
~~~~

A função `len` funciona em dicionários; ele retorna
o número de pares chave-valor:

\index{len function}
\index{function!len}

~~~~ {.python}
>>> len(ing2port)
3
~~~~

O operador `in` também funciona em dicionários; ele dirá
se algo aparece no dicionário como uma chave (os valores 
dos pares não são considerados).

\index{membership!dictionary}
\index{in operator}
\index{operator!in}

~~~~ {.python}
>>> 'one' in ing2port
True
>>> 'uno' in ing2port
False
~~~~

Para ver se algo aparece com valor em um dicionário, o método
`values` pode ser utilizado. Esse método retornará os valores
em uma lista, e então, usando o operador `in`:

\index{values method}
\index{method!values}

~~~~ {.python}
>>> vals = list(ing2port.values())
>>> 'um' in vals
True
~~~~


O operador `in` faz uso de um algoritmo diferente para listas
e dicionários. Em listas, ele executa um algoritmo de busca
linear. A medida que a lista vai ficando mais longa, o tempo
de busca aumenta proporcionalmente ao comprimento da lista.
Em dicionários, Python faz uso de um algoritmo chamado 
*tabela de dispersão* (hash table), que possui uma notória
propriedade: o operador `in` leva, aproximadamente, o mesmo 
tempo de execução, não importando a quantidade de itens no 
dicionário. Não explicarei porque funções hash são tão mágicas,
porém você pode ler mais sobre em: [wikipedia.org/wiki/Hash\_table](https://wikipedia.org/wiki/Hash_table). 

\index{hash table}
\index{set membership}
\index{membership!set}

**Exercício 1: Faça o download de uma cópia do arquivo **
[www.py4e.com/code3/words.txt](http://www.py4e.com/code3/words.txt)

**Escreva um programa que leia as palavras em *words.txt* e 
as armazena como chaves em um dicionário. Não importa quais 
são os valores. Então, você pode usar o operador `in` como 
uma maneira rápida de verificar se uma string está no dicionário.**

Dicionário como um conjunto de contadores
-------------------------------

\index{counter}

Suponha que lhe deram uma string e que você queira
contar quantas vezes cada letra aparece. Existem várias
formas de fazer isso:

1. 	Você pode criar 26 variáveis, uma para cada letra do
    alfabeto. Então, você pode examinar a string e, para cada 
    caractere, incrementar o contador correspondente, provavelmente
    usando uma condicional encadeada.

2.	Você pode criar uma lista com 26 elementos. Então, você
    pode converter cada caractere para um número (usando a função
    embutida ord), usar o número como um índice na lista, e 
    incrementar o contador apropriado.

3.	Você pode criar um dicionário com caracteres como chave
    e contadores como os valores correspondentes. A primeira vez
    em que um caractere for lido, um novo item seria adicionado
    ao dicionário. Após isso, o valor de um item existente seria incrementado. 

Cada uma destas opções executa a mesma computação, porém cada
uma delas implementas essa computação de forma diferente. 

\index{implementation}

Uma *implementação* é uma forma de executar uma computação;
algumas implementações são melhores que outras. Por exemplo,
uma vantagem da implementação utilizando o dicionário é que
não precisamos saber de antemão quais as letras presentes 
na string e nós apenas precisamos separar espaço para letras
que realmente aparecem.

Aqui está uma ideia de como este código seria:

~~~~ {.python .trinket}
palavra = 'brontosaurus'
d = dict()
for c in palavra:
    if c not in d:
        d[c] = 1
    else:
        d[c] = d[c] + 1
print(d)
~~~~

Estamos, efetivamente, computando um histograma, que é um 
termo estatístico para um conjunto de contadores (ou frequências).

\index{histogram}
\index{frequency}
\index{traversal}

A repetição `for` examina a string. A cada repetição, se o 
caractere `c` não estiver no dicionário, criamos um novo item 
com chave `c` e valor inicial 1 (já que vimos essa letra uma 
vez). Se c já estiver contido no dicionário, incrementamos `d[c]`.

\index{histogram}

Esta é a saída do programa:

~~~~
{'a': 1, 'b': 1, 'o': 2, 'n': 1, 's': 2, 'r': 2, 'u': 2, 't': 1}
~~~~

O histograma indica que as letras "a" e "b" aparecem uma vez; "o"
aparece duas vezes, e assim por diante.

\index{get method}
\index{method!get}

Dicionários possuem um método chamado `get` que recebe uma chave
e um valor padrão. Se a chave estiver contida no dicionário, `get`
retorna o valor correspondente; caso contrário, retorna o valor 
padrão. Por exemplo:

~~~~ {.python .trinket}
>>> conta = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
>>> print(conta.get('jan', 0))
100
>>> print(conta.get('tim', 0))
0
~~~~

Podemos usar `get` para escrever a repetição do histograma de
forma mais concisa. Já que  o método `get` automaticamente trata
o caso em que a chave não está contido no dicionário, podemos 
reduzir quatro linhas a apenas uma e descartar a instrução `if`.

~~~~ {.python}
word = 'brontosaurus'
d = dict()
for c in palavra:
    d[c] = d.get(c,0) + 1
print(d)
~~~~

O uso do método `get` para simplificar essa repetição é um “idiom”
muito comum em Python e nós a usaremos muitas vezes pelo resto 
deste livro. Portanto, você deveria tomar um tempo para comparar
a repetição utilizando a instrução `if` e o operador `in` com a 
repetição utilizando o método `get`. Ambos fazem a mesma coisa, 
porém um é mais sucinto.

\index{idiom}

Dicionários e Arquivos
----------------------

Um dos usos mais comum de um dicionário é para a contagem da 
ocorrência de palavras em um arquivo com algum texto. Comecemos
com um arquivo de palavras, muito simples, retirado do texto de
*Romeu e Julieta*.

Para o primeiro conjunto de exemplos, usaremos uma versão reduzida
e simplificada do texto, sem pontuação. Mais a frente, trabalharemos
com o texto original, com a pontuação.

    But soft what light through yonder window breaks
    It is the east and Juliet is the sun
    Arise fair sun and kill the envious moon
    Who is already sick and pale with grief

Escreveremos um programa em Python para ler as linhas do arquivo,
quebra-las em uma lista de palavras e então, contar a quantidade 
de cada palavra presente no texto, usando um dicionário.

\index{nested loops}
\index{loop!nested}

Veremos que temos duas repetições `for`. A repetição externa está
lendo a linhas do arquivo e a repetição interna está iterando para 
cada palavra naquela linha em particular. Esse é um exemplo de padrão
chamado *repetições aninhadas* pois uma repetição está contida dentro
de outra. 

Como a repetição interna executa todas as suas iterações enquanto 
a externa itera uma única vez, pensamos na repetição interna iterando
“mais rapidamente” enquanto a repetição externa itera ”mais lentamente”.  

\index{Romeo and Juliet}

A combinação das duas repetições aninhadas assegura que vamos contar
cada palavra em cada linha do arquivo de entrada. 

\VerbatimInput{../code3/count1.py}
\begin{trinketfiles}
../code3/romeo.txt
\end{trinketfiles}


Em nossa instrução `else`, usamos a alternativa mais compacta para
incrementar uma variável. `conta[palavra] += 1` é equivalente a 
`conta[palavra] =  conta[palavra]+1`. Tanto um método quanto o outro 
pode ser utilizado para alterar o valor da variável em qualquer que
seja a quantidade desejada. Alternativas similares existem para 
`-=`, `*=`, e `/=`.

Quando executamos o programa, vemos integramente todas as contagens 
em ordem aleatória. (o arquivo *romeo.txt* está disponível em
[www.py4e.com/code3/romeo.txt](http://www.py4e.com/code3/romeo.txt))

~~~~
python count1.py
Enter the file name: romeo.txt
{'and': 3, 'envious': 1, 'already': 1, 'fair': 1,
'is': 3, 'through': 1, 'pale': 1, 'yonder': 1,
'what': 1, 'sun': 2, 'Who': 1, 'But': 1, 'moon': 1,
'window': 1, 'sick': 1, 'east': 1, 'breaks': 1,
'grief': 1, 'with': 1, 'light': 1, 'It': 1, 'Arise': 1,
'kill': 1, 'the': 3, 'soft': 1, 'Juliet': 1}
~~~~

É um pouco inconveniente analisar um dicionário para encontrar
as palavras mais comuns e a sua quantidade, então precisamos 
adicionar um pouco mais de código Python para termos a saída mais útil.

Dicionários e Repetições
------------------------

\index{dictionary!looping with}
\index{looping!with dictionaries}
\index{traversal}

Se usarmos um dicionário como a sequência em uma instrução `for`,
ela examinará as chaves do dicionário. Esta repetição mostra cada
chave e seu valor correspondente:

~~~~ {.python}
conta = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
for chave in conta:
    print(chave, conta[key])
~~~~

Aqui está como a saída se parece:

~~~~
jan 100
chuck 1
annie 42
~~~~

Novamente, as chaves não estão em uma ordem particular.

\index{idiom}

Podemos usar este padrão para implementar vários “idioms”
de repetição que descrevemos anteriormente. Por exemplo, 
se quisermos encontrar todas a entradas em um dicionário 
com valor maior que dez, poderíamos escrever o seguinte 
código:

~~~~ {.python}
conta = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
for chave in conta:
    if conta[chave] > 10 :
        print(chave, conta[chave])
~~~~

The `for` loop iterates through the *keys* of
the dictionary, so we must use the index operator to retrieve the
corresponding *value* for each key. Here's what the output
looks like:

A repetição `for` itera em relação a cada uma das *chaves* 
do dicionário, então devemos utilizar o operador índice para 
retornar o *valor* correspondente a cada chave. A saída se pareceria com: 

~~~~
jan 100
annie 42
~~~~

Apenas vemos as entradas com valor acima de 10.

\index{keys method}
\index{method!keys}

Se quisermos mostrar as chaves em ordem alfabética, primeiramente
precisamos fazer uma lista, contendo essas chaves desse dicionário,
usando o método `keys`, disponível nos objetos do dicionário.
Então podemos ordenar a lista e avaliar a lista ordenada, analisando
cada chave e mostrando os pares chave-valor de forma ordenada, 
como a seguir:

~~~~ {.python}
counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
lst = list(counts.keys())
print(lst)
lst.sort()
for key in lst:
    print(key, counts[key])
~~~~

A saída se parece com:

~~~~
['jan', 'chuck', 'annie']
annie 42
chuck 1
jan 100
~~~~

Primeiro vemos a lista de chaves desordenada que retiramos pelo método
`key`. Em seguida, vemos os pares chave-valor em ordem, vindos da 
repetição `for`.

Advanced text parsing
---------------------

\index{Romeo and Juliet}

In the above example using the file *romeo.txt*, we made the
file as simple as possible by removing all punctuation by hand. The
actual text has lots of punctuation, as shown below.

~~~~
But, soft! what light through yonder window breaks?
It is the east, and Juliet is the sun.
Arise, fair sun, and kill the envious moon,
Who is already sick and pale with grief,
~~~~

Since the Python `split` function looks for spaces and treats
words as tokens separated by spaces, we would treat the words "soft!"
and "soft" as *different* words and create a separate dictionary entry
for each word.

Also since the file has capitalization, we would treat "who" and "Who"
as different words with different counts.

We can solve both these problems by using the string methods
`lower`, `punctuation`, and
`translate`. The `translate` is the most subtle of
the methods. Here is the documentation for `translate`:

`line.translate(str.maketrans(fromstr, tostr, deletestr))`

*Replace the characters in `fromstr` with the character in the same position in `tostr`
and delete all characters that are in `deletestr`.
The `fromstr` and `tostr` can be empty strings and the `deletestr`
parameter can be omitted.*

We will not specify the `tostr` but we will use the
`deletestr` parameter to delete all of the punctuation. We
will even let Python tell us the list of characters that it considers
"punctuation":

~~~~ {.python}
>>> import string
>>> string.punctuation
'!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
~~~~

The parameters used by `translate` were different in Python 2.0.

We make the following modifications to our program:

\VerbatimInput{../code3/count2.py}
\begin{trinketfiles}
../code3/romeo-full.txt
\end{trinketfiles}

Part of learning the "Art of Python" or "Thinking Pythonically" is
realizing that Python often has built-in capabilities for many common
data analysis problems. Over time, you will see enough example code and
read enough of the documentation to know where to look to see if someone
has already written something that makes your job much easier.

The following is an abbreviated version of the output:

~~~~
Enter the file name: romeo-full.txt
{'swearst': 1, 'all': 6, 'afeard': 1, 'leave': 2, 'these': 2,
'kinsmen': 2, 'what': 11, 'thinkst': 1, 'love': 24, 'cloak': 1,
a': 24, 'orchard': 2, 'light': 5, 'lovers': 2, 'romeo': 40,
'maiden': 1, 'whiteupturned': 1, 'juliet': 32, 'gentleman': 1,
'it': 22, 'leans': 1, 'canst': 1, 'having': 1, ...}
~~~~

Looking through this output is still unwieldy and we can use Python to
give us exactly what we are looking for, but to do so, we need to learn
about Python *tuples*. We will pick up this example once
we learn about tuples.

Debugging
---------

\index{debugging}

As you work with bigger datasets it can become unwieldy to debug by
printing and checking data by hand. Here are some suggestions for
debugging large datasets:

Scale down the input
:   If possible, reduce the size of the dataset. For example if the
    program reads a text file, start with just the first 10 lines, or
    with the smallest example you can find. You can either edit the
    files themselves, or (better) modify the program so it reads only
    the first `n` lines.

    If there is an error, you can reduce `n` to the smallest
    value that manifests the error, and then increase it gradually as
    you find and correct errors.

Check summaries and types
:   Instead of printing and checking the entire dataset, consider
    printing summaries of the data: for example, the number of items in
    a dictionary or the total of a list of numbers.

    A common cause of runtime errors is a value that is not the right
    type. For debugging this kind of error, it is often enough to print
    the type of a value.

Write self-checks
:   Sometimes you can write code to check for errors automatically. For
    example, if you are computing the average of a list of numbers, you
    could check that the result is not greater than the largest element
    in the list or less than the smallest. This is called a "sanity
    check" because it detects results that are "completely illogical".
\index{sanity check}
\index{consistency check}

    Another kind of check compares the results of two different
    computations to see if they are consistent. This is called a
    "consistency check".

Pretty print the output
:   Formatting debugging output can make it easier to spot an error.

Again, time you spend building scaffolding can reduce the time you spend
debugging.
\index{scaffolding}

Glossary
--------

dictionary
:   A mapping from a set of keys to their corresponding values.
\index{dictionary}

hashtable
:   The algorithm used to implement Python dictionaries.
\index{hashtable}

hash function
:   A function used by a hashtable to compute the location for a key.
\index{hash function}

histogram
:   A set of counters.
\index{histogram}

implementation
:   A way of performing a computation.
\index{implementation}

item
:   Another name for a key-value pair.
\index{item!dictionary}

key
:   An object that appears in a dictionary as the first part of a
    key-value pair.
\index{key}

key-value pair
:   The representation of the mapping from a key to a value.
\index{key-value pair}

lookup
:   A dictionary operation that takes a key and finds the corresponding
    value.
\index{lookup}

nested loops
:   When there are one or more loops "inside" of another loop. The inner
    loop runs to completion each time the outer loop runs once.
\index{nested loops}
\index{loop!nested}

value
:   An object that appears in a dictionary as the second part of a
    key-value pair. This is more specific than our previous use of the
    word "value".
\index{value}

Exercises
---------

**Exercise 2: Write a program that categorizes each mail message by which
day of the week the commit was done. To do this look for lines that
start with "From", then look for the third word and keep a running count
of each of the days of the week. At the end of the program print out the
contents of your dictionary (order does not matter).**

**Sample Line:**

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
~~~~

**Sample Execution:**

~~~~
python dow.py
Enter a file name: mbox-short.txt
{'Fri': 20, 'Thu': 6, 'Sat': 1}
~~~~

**Exercise 3: Write a program to read through a mail log, build a
histogram using a dictionary to count how many messages have come from
each email address, and print the dictionary.**

~~~~
Enter file name: mbox-short.txt
{'gopal.ramasammycook@gmail.com': 1, 'louis@media.berkeley.edu': 3,
'cwen@iupui.edu': 5, 'antranig@caret.cam.ac.uk': 1,
'rjlowe@iupui.edu': 2, 'gsilver@umich.edu': 3,
'david.horwitz@uct.ac.za': 4, 'wagnermr@iupui.edu': 1,
'zqian@umich.edu': 4, 'stephen.marquard@uct.ac.za': 2,
'ray@media.berkeley.edu': 1}
~~~~

**Exercise 4: Add code to the above program to figure out who has the most messages in the file. After all the data has been read and the dictionary has been created, look through the dictionary using a maximum loop (see Chapter 5: Maximum and minimum loops) to find who has the most messages and print how many messages the person has.**

~~~~
Enter a file name: mbox-short.txt
cwen@iupui.edu 5

Enter a file name: mbox.txt
zqian@umich.edu 195
~~~~

**Exercise 5: This program records the domain name (instead of the
address) where the message was sent from instead of who the mail came
from (i.e., the whole email address). At the end of the program, print
out the contents of your dictionary.**

~~~~
python schoolcount.py
Enter a file name: mbox-short.txt
{'media.berkeley.edu': 4, 'uct.ac.za': 6, 'umich.edu': 7,
'gmail.com': 1, 'caret.cam.ac.uk': 1, 'iupui.edu': 8}
~~~~

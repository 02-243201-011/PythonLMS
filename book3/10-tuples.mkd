
Tuplas
======

As tuplas são imutáveis
--------------------

\index{tuple}
\index{type!tuple}
\index{sequence}

A tuple^[Fun fact: The word "tuple" comes from the names given to sequences
of numbers of varying lengths: single, double, triple, quadruple,
quintuple, sextuple, septuple, etc.] is a sequence of values much like a list. The values stored
em uma tupla pode ser qualquer tipo, e eles são indexados por números inteiros. O
diferença importante é que as tuplas são * imutáveis *.
As tuplas também são * comparáveis * e
* hashable * para que possamos Ordenar listas deles e usar tuplas como
valores-chave em dicionários Python.

\index{mutability}
\index{hashable}
\index{comparable}
\index{immutability}

Sintaticamente, uma tupla é uma lista separada por vírgulas de valores:

~~~~ {.python}
>>> t = 'a', 'b', 'c', 'd', 'e'
~~~~

Embora não seja necessário, é comum incluir tuplas em
parênteses para nos ajudar a identificar rapidamente tuplas quando olhamos para Python
Código:

\index{parentheses!tuples in}

~~~~ {.python}
>>> t = ('a', 'b', 'c', 'd', 'e')
~~~~

Para criar uma tupla com um único elemento, você precisa incluir a vírgula final:

\index{singleton}
\index{tuple!singleton}

~~~~ {.python .trinket}
>>> t1 = ('a',)
>>> type(t1)
<type 'tuple'>
~~~~

Sem a vírgula Python trata ' (' a ') ' como uma expressão com uma cadeia de caracteres entre parênteses que é avaliada como uma cadeia de caracteres:

~~~~ {.python}
>>> t2 = ('a')
>>> type(t2)
<type 'str'>
~~~~

Outra maneira de construir uma tupla é a função interna
' Tuple '. Sem nenhum argumento, ele cria uma tupla vazia:

\index{tuple function}
\index{function!tuple}

~~~~ {.python .trinket}
>>> t = tuple()
>>> print(t)
()
~~~~

Se o argumento for uma seqüência (cadeia de caracteres, lista ou tupla), o resultado de
a chamada para ' tupla ' é uma tupla com os elementos do
Seqüência:

~~~~ {.python .trinket}
>>> t = tuple('lupins')
>>> print(t)
('l', 'u', 'p', 'i', 'n', 's')
~~~~

Porque ' tupla ' é o nome de um construtor, você deve
Evite usá-lo como um nome de variável.

A maioria dos operadores de lista também funcionam em tuplas. O operador de colchete indexa na elemento:

\index{bracket operator}
\index{operator!bracket}

~~~~ {.python .trinket}
>>> t = ('a', 'b', 'c', 'd', 'e')
>>> print(t[0])
'a'
~~~~
E o operador de fatia seleciona um intervalo de elementos.

\index{slice operator}
\index{operator!slice}
\index{tuple!slice}
\index{slice!tuple}

~~~~ {.python}
>>> print(t[1:3])
('b', 'c')
~~~~

Mas se você tentar modificar um dos elementos da tupla, você receberá um erro:

\index{exception!TypeError}
\index{TypeError}
\index{item assignment}
\index{assignment!item}

~~~~ {.python}
>>> t[0] = 'A'
TypeError: object doesn't support item assignment
~~~~

Não é possível modificar os elementos de uma tupla, mas você pode substituir uma tupla por outra:

~~~~ {.python .trinket}
>>> t = ('A',) + t[1:]
>>> print(t)
('A', 'b', 'c', 'd', 'e')
~~~~

Comparando tuplas
----------------

\index{comparison!tuple}
\index{tuple!comparison}
\index{sort method}
\index{method!sort}

Os operadores de comparação trabalham com tuplas e outras sequências. Python começa comparando o primeiro elemento de cada sequência. Se eles forem iguais, ele passa para o próximo elemento, e assim por diante, até encontrar elementos que diferem. Elementos subseqüentes não são considerados (mesmo se eles são realmente grandes).

~~~~ {.python .trinket}
>>> (0, 1, 2) < (0, 3, 4)
True
>>> (0, 1, 2000000) < (0, 3, 4)
True
~~~~

A função ' Sort ' funciona da mesma forma. Ele classifica principalmente por
primeiro elemento, mas no caso de um empate, ele classifica por segundo elemento, e assim por diante.

Este recurso presta-se a um padrão chamado * DSU * para

Decorar
: uma sequência construindo uma lista de tuplas com uma ou mais chaves de classificação
    precedendo os elementos da sequência,

Tipo
: a lista de tuplas usando o Python embutido ' Sort ', e

Undecorate
: extraindo os elementos classificados da sequência.

\index{DSU pattern}
\index{pattern!DSU}
\index{decorate-sort-undecorate pattern}
\index{pattern!decorate-sort-undecorate}
\index{Romeo and Juliet}

Por exemplo, suponha que você tem uma lista de palavras e você deseja classificá-los de mais longo para o mais curto:

\VerbatimInput{../code3/soft.py} 

O primeiro loop cria uma lista de tuplas, onde cada tupla é uma palavra
precedido pelo seu comprimento.

' Sort ' compara o primeiro elemento, comprimento, primeiro e apenas
considera o segundo elemento a quebrar laços. O argumento de palavra-chave
' Reverse = true ' diz ' Sort ' para ir em decrescente
Ordem.

\index{keyword argument}
\index{argument!keyword}
\index{traversal}

O segundo loop atravessa a lista de tuplas e constrói uma lista de palavras
em ordem decrescente de comprimento. As palavras de quatro caracteres são classificadas em * Reverse * ordem alfabética, então "o que" aparece antes
"soft" na lista a seguir.

A saída do programa é a seguinte:

~~~~
['yonder', 'window', 'breaks', 'light', 'what',
'soft', 'but', 'in']
~~~~

Claro que a linha perde muito do seu impacto poético quando transformado em um
Lista de Python e classificada em ordem decrescente de comprimento de palavra.

Tuple assignment
----------------

\index{tuple!assignment}
\index{assignment!tuple}
\index{swap pattern}
\index{pattern!swap}

One of the unique syntactic features of the Python language is the
ability to have a tuple on the left side of an assignment statement.
This allows you to assign more than one variable at a time when the left
side is a sequence.

In this example we have a two-element list (which is a sequence) and
assign the first and second elements of the sequence to the variables
`x` and `y` in a single statement.

~~~~ {.python .trinket}
>>> m = [ 'have', 'fun' ]
>>> x, y = m
>>> x
'have'
>>> y
'fun'
>>>
~~~~

It is not magic, Python *roughly* translates the tuple assignment syntax
to be the following:^[Python does not translate the syntax literally. For example, if
you try this with a dictionary, it will not work as might expect.]

~~~~ {.python .trinket}
>>> m = [ 'have', 'fun' ]
>>> x = m[0]
>>> y = m[1]
>>> x
'have'
>>> y
'fun'
>>>
~~~~

Stylistically when we use a tuple on the left side of the assignment
statement, we omit the parentheses, but the following is an equally
valid syntax:

~~~~ {.python}
>>> m = [ 'have', 'fun' ]
>>> (x, y) = m
>>> x
'have'
>>> y
'fun'
>>>
~~~~

A particularly clever application of tuple assignment allows us to
*swap* the values of two variables in a single statement:

~~~~ {.python}
>>> a, b = b, a
~~~~

Both sides of this statement are tuples, but the left side is a tuple of
variables; the right side is a tuple of expressions. Each value on the
right side is assigned to its respective variable on the left side. All
the expressions on the right side are evaluated before any of the
assignments.

The number of variables on the left and the number of values on the
right must be the same:

\index{exception!ValueError}
\index{ValueError}

~~~~ {.python}
>>> a, b = 1, 2, 3
ValueError: too many values to unpack
~~~~

More generally, the right side can be any kind of sequence (string,
list, or tuple). For example, to split an email address into a user name
and a domain, you could write:

\index{split method}
\index{method!split}
\index{email address}

~~~~ {.python}
>>> addr = 'monty@python.org'
>>> uname, domain = addr.split('@')
~~~~

The return value from `split` is a list with two elements;
the first element is assigned to `uname`, the second to
`domain`.

~~~~ {.python}
>>> print(uname)
monty
>>> print(domain)
python.org
~~~~

Dictionaries and tuples
-----------------------

\index{dictionary}
\index{items method}
\index{method!items}
\index{key-value pair}

Dictionaries have a method called `items` that returns a list
of tuples, where each tuple is a key-value pair:

~~~~ {.python .trinket}
>>> d = {'a':10, 'b':1, 'c':22}
>>> t = list(d.items())
>>> print(t)
[('b', 1), ('a', 10), ('c', 22)]
~~~~

As you should expect from a dictionary, the items are in no particular
order.

However, since the list of tuples is a list, and tuples are comparable,
we can now sort the list of tuples. Converting a dictionary to a list of
tuples is a way for us to output the contents of a dictionary sorted by
key:

~~~~ {.python}
>>> d = {'a':10, 'b':1, 'c':22}
>>> t = list(d.items())
>>> t
[('b', 1), ('a', 10), ('c', 22)]
>>> t.sort()
>>> t
[('a', 10), ('b', 1), ('c', 22)]
~~~~

The new list is sorted in ascending alphabetical order by the key value.

Múltipla atribuição com dicionários
------------------------------------

\index{traverse!dictionary}
\index{dictionary!traversal}

Combinando `items`, atribuição de tuplas e `for`, se tem um bom padrão de código para percorrer as chaves e valores de um dicionário em um único loop:

~~~~ {.python}
for key, val in list(d.items()):
    print(val, key)
~~~~

Esse loop tem duas *variáveis de iteração*, isso porque `items` retorna uma lista de tuplas e `key, val` é uma atribuição de tupla que itera sucessivamente em cada um dos pares de valore/chave no dicionário.

Para cada iteração através de um loop, tanto a chave quanto o valor são avançados para o próximo par de valores no dicionário(mantendo a ordem hash).

A saída deste loop é:

~~~~
10 a
22 c
1 b
~~~~

Novamente, é na ordem da chave hash(nenhuma ordem particular).

Se nós combinarmos essas duas técnicas, nós poderemos imprimir o conteúdo do dicionário ordenado pelo *valor* armazenado em cada par de chave/valor.

Para fazer isso, primeiro fazemos uma lista de tuplas onde cada tupla é `(valor, chave)`. O método `items` nos daria uma lista de tuplas `(chave, valor)`, mas desta vez queremos classificar por valor, não por chave. Depois de construir a lista com as tuplas de chave e valor é simples ordenar a lista na ordem inversa e imprimir a nova lista ordenada.

~~~~ {.python}
>>> d = {'a':10, 'b':1, 'c':22}
>>> l = list()
>>> for key, val in d.items() :
...     l.append( (val, key) )
...
>>> l
[(10, 'a'), (22, 'c'), (1, 'b')]
>>> l.sort(reverse=True)
>>> l
[(22, 'c'), (10, 'a'), (1, 'b')]
>>>
~~~~

Construindo cuidadosamente a lista de tuplas para ter o valor como o primeiro elemento de cada tupla, podemos ordenar a lista de tuplas e obter nosso conteúdo de dicionário ordenado por valor.

As palavras mais comuns
-----------------------

\index{Romeu e Julieta}

Voltando ao nosso exemplo de sempre do texto de Romeu e Julieta, Ato 2, Cena 2, podemos aumentar nosso programa para usar essa técnica para imprimir as dez palavras mais comuns no texto da seguinte forma:

\VerbatimInput{../code3/count3.py} 
\begin{trinketfiles}
../code3/romeo-full.txt
\end{trinketfiles}

A primeira parte do programa que lê o arquivo e computa o dicionário que mapeia cada palavra para a contagem no documento não foi alterada. Mas, em vez de simplesmente imprimir `counts` e encerrar o programa, construímos uma lista de tuplas `(val, key)` e depois classificamos a lista na ordem inversa.

Como o valor é o primeiro, ele será usado para as comparações. Se houver mais de uma tupla com o mesmo valor, ela olhará para o segundo elemento (a chave), portanto, as tuplas onde o valor é o mesmo serão classificadas pela ordem alfabética da chave.

No final, escrevemos um loop `for` que faz uma iteração de atribuição múltipla e imprime as dez palavras mais comuns, percorrendo uma fatia da lista (`lst [: 10]`).

Então agora a saída finalmente parece com o que queremos para nossa análise de frequência de palavras.

~~~~
61 u
42 and
40 romeo
34 to
34 the
32 thou
32 juliet
30 that
29 my
24 thee
~~~~

O fato de essa análise e análise de dados complexos poderem ser feitos com um programa Python de 19 linhas e fácil de entender é uma das razões pelas quais o Python é uma boa escolha como uma linguagem para análise de dados.


Usando tuplas como chaves em dicionários
------------------------------------

\index{tuple!as key in dictionary}
\index{hashable}

Como as tuplas são *mutáveis* e as listas não são, se nós
desejamod criar uma chave *composta* para usar em um dicionário
devemos usar uma tupla como chave.

Nós encontraríamos uma chave composta se quiséssemos criar um telefone
diretório que mapeia de pares de nome e sobrenome, para números de telefone.
Assumindo que definimos as variáveis 'last`,`first` e` number`, poderíamos escrever
um dicionário com a declaração de atribuição da seguinte forma:

~~~~ {.python}
diretório [último, primeiro] = número
~~~~

A expressão entre colchetes é uma tupla. Poderíamos usar a atribuição de tupla em
uma repetição `for` para percorrer este dicionário.

\index{tuple!in brackets}

~~~~ {.python}
for último, primeiro in diretório:
    imprimir (primeiro, último, diretório [último, primeiro])
~~~~

Este loop percorre as chaves em `directory`, que são
tuplas. Ele designa os elementos de cada tupla para 'last` e
`primeiro`, depois imprime o nome e o telefone correspondente
número.


Sequências: strings, listas e tuplas - Oh meu Deus!
--------------------------------------------

\index{sequence}

Concentrei-me em listas de tuplas, mas quase todos os exemplos neste capítulo também 
funcionam com listas de listas, tuplas de tuplas e tuplas de listas. Para evitar 
enumerar as combinações possíveis, às vezes é mais fácil falar sobre sequências de 
sequências.

Em muitos contextos, os diferentes tipos de sequências (strings, listas e tuplas) 
podem ser usados de forma intercambiável. Então, como e por que você escolhe um 
sobre os outros?

\index{string}
\index{list}
\index{tuple}
\index{mutability}
\index{immutability}

Para começar com o óbvio, as strings são mais limitadas que outras sequências, 
porque os elementos precisam ser caracteres. Eles também são imutáveis. Se você 
precisar alterar os caracteres em uma string (em vez de criar uma nova string), 
você deveria usar uma lista de caracteres.

As listas são mais comuns que as tuplas, principalmente porque são mutáveis. Mas há 
alguns casos em que você pode preferir tuplas:

1.  Em alguns contextos, como uma instrução de `return`, é sintaticamente mais
simples criar uma tupla do que uma lista. Em outros contextos, você pode preferir 
uma lista.

2.  Se você quiser usar uma sequência como uma chave de dicionário, você tem que 
usar um tipo imutável como uma tupla ou uma string.

3.  Se você estiver passando uma sequência como um argumento para uma função, o uso 
de tuplas reduz o potencial de comportamento inesperado devido ao 
aliasing(serrilhamento).

Como as tuplas são imutáveis, elas não fornecem métodos como `sort` e `reverse`, o 
que modifica as listas existentes. No entanto, o Python fornece as funções internas 
`sorted` and `reversed`, que usam qualquer sequência como parâmetro e retornam uma 
nova seqüência com os mesmos elementos em uma ordem diferente.

\index{sorted function}
\index{function!sorted}
\index{reversed function}
\index{function!reversed}

Debugging
---------

\index{debugging}
\index{data structure}
\index{shape error}
\index{error!shape}

Lists, dictionaries and tuples are known generically as *data
structures*; in this chapter we are starting to see compound
data structures, like lists of tuples, and dictionaries that contain
tuples as keys and lists as values. Compound data structures are useful,
but they are prone to what I call *shape errors*; that
is, errors caused when a data structure has the wrong type, size, or
composition, or perhaps you write some code and forget the shape of your
data and introduce an error. For example, if you are expecting a list with one integer and I give you a plain old integer (not in a list), it won't work.

Glossary
--------

comparable
:   A type where one value can be checked to see if it is greater than,
    less than, or equal to another value of the same type. Types which
    are comparable can be put in a list and sorted.
\index{comparable}

data structure
:   A collection of related values, often organized in lists,
    dictionaries, tuples, etc.
\index{data structure}

DSU
:   Abbreviation of "decorate-sort-undecorate", a pattern that involves
    building a list of tuples, sorting, and extracting part of the
    result.
\index{DSU pattern}

gather
:   The operation of assembling a variable-length argument tuple.
\index{gather}

hashable
:   A type that has a hash function. Immutable types like integers,
    floats, and strings are hashable; mutable types like lists and
    dictionaries are not.
\index{hashable}

scatter
:   The operation of treating a sequence as a list of arguments.
\index{scatter}

shape (of a data structure)
:   A summary of the type, size, and composition of a data structure.
\index{shape}

singleton
:   A list (or other sequence) with a single element.
\index{singleton}

tuple
:   An immutable sequence of elements.
\index{tuple}

tuple assignment
:   An assignment with a sequence on the right side and a tuple of
    variables on the left. The right side is evaluated and then its
    elements are assigned to the variables on the left.
\index{tuple assignment}
\index{assignment!tuple}

Exercises
---------

**Exercise 1: Revise a previous program as follows: Read and parse the
"From" lines and pull out the addresses from the line. Count the number
of messages from each person using a dictionary.**

**After all the data has been read, print the person with the most commits
by creating a list of (count, email) tuples from the dictionary. Then
sort the list in reverse order and print out the person who has the most
commits.**

~~~~
Sample Line:
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008

Enter a file name: mbox-short.txt
cwen@iupui.edu 5

Enter a file name: mbox.txt
zqian@umich.edu 195
~~~~

**Exercise 2: This program counts the distribution of the hour of the day
for each of the messages. You can pull the hour from the "From" line by
finding the time string and then splitting that string into parts using
the colon character. Once you have accumulated the counts for each hour,
print out the counts, one per line, sorted by hour as shown below.**

~~~~
python timeofday.py
Enter a file name: mbox-short.txt
04 3
06 1
07 1
09 2
10 3
11 6
14 1
15 2
16 4
17 2
18 1
19 1
~~~~

**Exercise 3: Write a program that reads a file and prints the
*letters* in decreasing order of frequency. Your program
should convert all the input to lower case and only count the letters
a-z. Your program should not count spaces, digits, punctuation, or
anything other than the letters a-z. Find text samples from several
different languages and see how letter frequency varies between
languages. Compare your results with the tables at
<https://wikipedia.org/wiki/Letter_frequencies>.**

\index{letter frequency}
\index{frequency!letter}


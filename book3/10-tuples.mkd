
Tuples
======

Tuples are immutable
--------------------

\index{tuple}
\index{type!tuple}
\index{sequence}

A tuple^[Fun fact: The word "tuple" comes from the names given to sequences
of numbers of varying lengths: single, double, triple, quadruple,
quintuple, sextuple, septuple, etc.] is a sequence of values much like a list. The values stored
in a tuple can be any type, and they are indexed by integers. The
important difference is that tuples are *immutable*.
Tuples are also *comparable* and
*hashable* so we can sort lists of them and use tuples as
key values in Python dictionaries.

\index{mutability}
\index{hashable}
\index{comparable}
\index{immutability}

Syntactically, a tuple is a comma-separated list of values:

~~~~ {.python}
>>> t = 'a', 'b', 'c', 'd', 'e'
~~~~

Although it is not necessary, it is common to enclose tuples in
parentheses to help us quickly identify tuples when we look at Python
code:

\index{parentheses!tuples in}

~~~~ {.python}
>>> t = ('a', 'b', 'c', 'd', 'e')
~~~~

To create a tuple with a single element, you have to include the final
comma:

\index{singleton}
\index{tuple!singleton}

~~~~ {.python .trinket}
>>> t1 = ('a',)
>>> type(t1)
<type 'tuple'>
~~~~

Without the comma Python treats `('a')` as an expression with a string
in parentheses that evaluates to a string:

~~~~ {.python}
>>> t2 = ('a')
>>> type(t2)
<type 'str'>
~~~~

Another way to construct a tuple is the built-in function
`tuple`. With no argument, it creates an empty tuple:

\index{tuple function}
\index{function!tuple}

~~~~ {.python .trinket}
>>> t = tuple()
>>> print(t)
()
~~~~

If the argument is a sequence (string, list, or tuple), the result of
the call to `tuple` is a tuple with the elements of the
sequence:

~~~~ {.python .trinket}
>>> t = tuple('lupins')
>>> print(t)
('l', 'u', 'p', 'i', 'n', 's')
~~~~

Because `tuple` is the name of a constructor, you should
avoid using it as a variable name.

Most list operators also work on tuples. The bracket operator indexes an
element:

\index{bracket operator}
\index{operator!bracket}

~~~~ {.python .trinket}
>>> t = ('a', 'b', 'c', 'd', 'e')
>>> print(t[0])
'a'
~~~~

And the slice operator selects a range of elements.

\index{slice operator}
\index{operator!slice}
\index{tuple!slice}
\index{slice!tuple}

~~~~ {.python}
>>> print(t[1:3])
('b', 'c')
~~~~

But if you try to modify one of the elements of the tuple, you get an
error:

\index{exception!TypeError}
\index{TypeError}
\index{item assignment}
\index{assignment!item}

~~~~ {.python}
>>> t[0] = 'A'
TypeError: object doesn't support item assignment
~~~~

You can't modify the elements of a tuple, but you can replace one tuple
with another:

~~~~ {.python .trinket}
>>> t = ('A',) + t[1:]
>>> print(t)
('A', 'b', 'c', 'd', 'e')
~~~~

Comparing tuples
----------------

\index{comparison!tuple}
\index{tuple!comparison}
\index{sort method}
\index{method!sort}

The comparison operators work with tuples and other sequences. Python
starts by comparing the first element from each sequence. If they are
equal, it goes on to the next element, and so on, until it finds
elements that differ. Subsequent elements are not considered (even if
they are really big).

~~~~ {.python .trinket}
>>> (0, 1, 2) < (0, 3, 4)
True
>>> (0, 1, 2000000) < (0, 3, 4)
True
~~~~

The `sort` function works the same way. It sorts primarily by
first element, but in the case of a tie, it sorts by second element, and
so on.

This feature lends itself to a pattern called *DSU* for

Decorate
:   a sequence by building a list of tuples with one or more sort keys
    preceding the elements from the sequence,

Sort
:   the list of tuples using the Python built-in `sort`, and

Undecorate
:   by extracting the sorted elements of the sequence.

\index{DSU pattern}
\index{pattern!DSU}
\index{decorate-sort-undecorate pattern}
\index{pattern!decorate-sort-undecorate}
\index{Romeo and Juliet}

For example, suppose you have a list of words and you want to sort them
from longest to shortest:

\VerbatimInput{../code3/soft.py} 

The first loop builds a list of tuples, where each tuple is a word
preceded by its length.

`sort` compares the first element, length, first, and only
considers the second element to break ties. The keyword argument
`reverse=True` tells `sort` to go in decreasing
order.

\index{keyword argument}
\index{argument!keyword}
\index{traversal}

The second loop traverses the list of tuples and builds a list of words
in descending order of length. The four-character words are sorted in
*reverse* alphabetical order, so "what" appears before
"soft" in the following list.

The output of the program is as follows:

~~~~
['yonder', 'window', 'breaks', 'light', 'what',
'soft', 'but', 'in']
~~~~

Of course the line loses much of its poetic impact when turned into a
Python list and sorted in descending word length order.

Tuple assignment
----------------

\index{tuple!assignment}
\index{assignment!tuple}
\index{swap pattern}
\index{pattern!swap}

One of the unique syntactic features of the Python language is the
ability to have a tuple on the left side of an assignment statement.
This allows you to assign more than one variable at a time when the left
side is a sequence.

In this example we have a two-element list (which is a sequence) and
assign the first and second elements of the sequence to the variables
`x` and `y` in a single statement.

~~~~ {.python .trinket}
>>> m = [ 'have', 'fun' ]
>>> x, y = m
>>> x
'have'
>>> y
'fun'
>>>
~~~~

It is not magic, Python *roughly* translates the tuple assignment syntax
to be the following:^[Python does not translate the syntax literally. For example, if
you try this with a dictionary, it will not work as might expect.]

~~~~ {.python .trinket}
>>> m = [ 'have', 'fun' ]
>>> x = m[0]
>>> y = m[1]
>>> x
'have'
>>> y
'fun'
>>>
~~~~

Stylistically when we use a tuple on the left side of the assignment
statement, we omit the parentheses, but the following is an equally
valid syntax:

~~~~ {.python}
>>> m = [ 'have', 'fun' ]
>>> (x, y) = m
>>> x
'have'
>>> y
'fun'
>>>
~~~~

A particularly clever application of tuple assignment allows us to
*swap* the values of two variables in a single statement:

~~~~ {.python}
>>> a, b = b, a
~~~~

Both sides of this statement are tuples, but the left side is a tuple of
variables; the right side is a tuple of expressions. Each value on the
right side is assigned to its respective variable on the left side. All
the expressions on the right side are evaluated before any of the
assignments.

The number of variables on the left and the number of values on the
right must be the same:

\index{exception!ValueError}
\index{ValueError}

~~~~ {.python}
>>> a, b = 1, 2, 3
ValueError: too many values to unpack
~~~~

More generally, the right side can be any kind of sequence (string,
list, or tuple). For example, to split an email address into a user name
and a domain, you could write:

\index{split method}
\index{method!split}
\index{email address}

~~~~ {.python}
>>> addr = 'monty@python.org'
>>> uname, domain = addr.split('@')
~~~~

The return value from `split` is a list with two elements;
the first element is assigned to `uname`, the second to
`domain`.

~~~~ {.python}
>>> print(uname)
monty
>>> print(domain)
python.org
~~~~

Dictionaries and tuples
-----------------------

\index{dictionary}
\index{items method}
\index{method!items}
\index{key-value pair}

Dictionaries have a method called `items` that returns a list
of tuples, where each tuple is a key-value pair:

~~~~ {.python .trinket}
>>> d = {'a':10, 'b':1, 'c':22}
>>> t = list(d.items())
>>> print(t)
[('b', 1), ('a', 10), ('c', 22)]
~~~~

As you should expect from a dictionary, the items are in no particular
order.

However, since the list of tuples is a list, and tuples are comparable,
we can now sort the list of tuples. Converting a dictionary to a list of
tuples is a way for us to output the contents of a dictionary sorted by
key:

~~~~ {.python}
>>> d = {'a':10, 'b':1, 'c':22}
>>> t = list(d.items())
>>> t
[('b', 1), ('a', 10), ('c', 22)]
>>> t.sort()
>>> t
[('a', 10), ('b', 1), ('c', 22)]
~~~~

The new list is sorted in ascending alphabetical order by the key value.

Multiple assignment with dictionaries
-------------------------------------

\index{traverse!dictionary}
\index{dictionary!traversal}

Combining `items`, tuple assignment, and `for`,
you can see a nice code pattern for traversing the keys and values of a
dictionary in a single loop:

~~~~ {.python}
for key, val in list(d.items()):
    print(val, key)
~~~~

This loop has two *iteration variables* because
`items` returns a list of tuples and `key, val` is
a tuple assignment that successively iterates through each of the
key-value pairs in the dictionary.

For each iteration through the loop, both `key` and
`value` are advanced to the next key-value pair in the
dictionary (still in hash order).

The output of this loop is:

~~~~
10 a
22 c
1 b
~~~~

Again, it is in hash key order (i.e., no particular order).

If we combine these two techniques, we can print out the contents of a
dictionary sorted by the *value* stored in each key-value pair.

To do this, we first make a list of tuples where each tuple is
`(value, key)`. The `items` method would give us a
list of `(key, value)` tuples, but this time we want to sort
by value, not key. Once we have constructed the list with the value-key
tuples, it is a simple matter to sort the list in reverse order and
print out the new, sorted list.

~~~~ {.python}
>>> d = {'a':10, 'b':1, 'c':22}
>>> l = list()
>>> for key, val in d.items() :
...     l.append( (val, key) )
...
>>> l
[(10, 'a'), (22, 'c'), (1, 'b')]
>>> l.sort(reverse=True)
>>> l
[(22, 'c'), (10, 'a'), (1, 'b')]
>>>
~~~~

By carefully constructing the list of tuples to have the value as the
first element of each tuple, we can sort the list of tuples and get our
dictionary contents sorted by value.

The most common words
---------------------

\index{Romeo and Juliet}

Coming back to our running example of the text from *Romeo and Juliet*
Act 2, Scene 2, we can augment our program to use this technique to
print the ten most common words in the text as follows:

\VerbatimInput{../code3/count3.py} 
\begin{trinketfiles}
../code3/romeo-full.txt
\end{trinketfiles}

The first part of the program which reads the file and computes the
dictionary that maps each word to the count of words in the document is
unchanged. But instead of simply printing out `counts` and
ending the program, we construct a list of `(val, key)`
tuples and then sort the list in reverse order.

Since the value is first, it will be used for the comparisons. If there
is more than one tuple with the same value, it will look at the second
element (the key), so tuples where the value is the same will be further
sorted by the alphabetical order of the key.

At the end we write a nice `for` loop which does a multiple
assignment iteration and prints out the ten most common words by
iterating through a slice of the list (`lst[:10]`).

So now the output finally looks like what we want for our word frequency
analysis.

~~~~
61 i
42 and
40 romeo
34 to
34 the
32 thou
32 juliet
30 that
29 my
24 thee
~~~~

The fact that this complex data parsing and analysis can be done with an
easy-to-understand 19-line Python program is one reason why Python is a
good choice as a language for exploring information.


Usando tuplas como chaves em dicionários
------------------------------------

\index{tuple!as key in dictionary}
\index{hashable}

Como as tuplas são *mutáveis* e as listas não são, se nós
desejamod criar uma chave *composta* para usar em um dicionário
devemos usar uma tupla como chave.

Nós encontraríamos uma chave composta se quiséssemos criar um telefone
diretório que mapeia de pares de nome e sobrenome, para números de telefone.
Assumindo que definimos as variáveis 'last`,`first` e` number`, poderíamos escrever
um dicionário com a declaração de atribuição da seguinte forma:

~~~~ {.python}
diretório [último, primeiro] = número
~~~~

A expressão entre colchetes é uma tupla. Poderíamos usar a atribuição de tupla em
uma repetição `for` para percorrer este dicionário.

\index{tuple!in brackets}

~~~~ {.python}
for último, primeiro in diretório:
    imprimir (primeiro, último, diretório [último, primeiro])
~~~~

Este loop percorre as chaves em `directory`, que são
tuplas. Ele designa os elementos de cada tupla para 'last` e
`primeiro`, depois imprime o nome e o telefone correspondente
número.


Sequências: strings, listas e tuplas - Oh meu Deus!
--------------------------------------------

\index{sequence}

Concentrei-me em listas de tuplas, mas quase todos os exemplos neste capítulo também 
funcionam com listas de listas, tuplas de tuplas e tuplas de listas. Para evitar 
enumerar as combinações possíveis, às vezes é mais fácil falar sobre sequências de 
sequências.

Em muitos contextos, os diferentes tipos de sequências (strings, listas e tuplas) 
podem ser usados de forma intercambiável. Então, como e por que você escolhe um 
sobre os outros?

\index{string}
\index{list}
\index{tuple}
\index{mutability}
\index{immutability}

Para começar com o óbvio, as strings são mais limitadas que outras sequências, 
porque os elementos precisam ser caracteres. Eles também são imutáveis. Se você 
precisar alterar os caracteres em uma string (em vez de criar uma nova string), 
você deveria usar uma lista de caracteres.

As listas são mais comuns que as tuplas, principalmente porque são mutáveis. Mas há 
alguns casos em que você pode preferir tuplas:

1.  Em alguns contextos, como uma instrução de `return`, é sintaticamente mais
simples criar uma tupla do que uma lista. Em outros contextos, você pode preferir 
uma lista.

2.  Se você quiser usar uma sequência como uma chave de dicionário, você tem que 
usar um tipo imutável como uma tupla ou uma string.

3.  Se você estiver passando uma sequência como um argumento para uma função, o uso 
de tuplas reduz o potencial de comportamento inesperado devido ao 
aliasing(serrilhamento).

Como as tuplas são imutáveis, elas não fornecem métodos como `sort` e `reverse`, o 
que modifica as listas existentes. No entanto, o Python fornece as funções internas 
`sorted` and `reversed`, que usam qualquer sequência como parâmetro e retornam uma 
nova seqüência com os mesmos elementos em uma ordem diferente.

\index{sorted function}
\index{function!sorted}
\index{reversed function}
\index{function!reversed}

Debugging
---------

\index{debugging}
\index{data structure}
\index{shape error}
\index{error!shape}

Lists, dictionaries and tuples are known generically as *data
structures*; in this chapter we are starting to see compound
data structures, like lists of tuples, and dictionaries that contain
tuples as keys and lists as values. Compound data structures are useful,
but they are prone to what I call *shape errors*; that
is, errors caused when a data structure has the wrong type, size, or
composition, or perhaps you write some code and forget the shape of your
data and introduce an error. For example, if you are expecting a list with one integer and I give you a plain old integer (not in a list), it won't work.

Glossary
--------

comparable
:   A type where one value can be checked to see if it is greater than,
    less than, or equal to another value of the same type. Types which
    are comparable can be put in a list and sorted.
\index{comparable}

data structure
:   A collection of related values, often organized in lists,
    dictionaries, tuples, etc.
\index{data structure}

DSU
:   Abbreviation of "decorate-sort-undecorate", a pattern that involves
    building a list of tuples, sorting, and extracting part of the
    result.
\index{DSU pattern}

gather
:   The operation of assembling a variable-length argument tuple.
\index{gather}

hashable
:   A type that has a hash function. Immutable types like integers,
    floats, and strings are hashable; mutable types like lists and
    dictionaries are not.
\index{hashable}

scatter
:   The operation of treating a sequence as a list of arguments.
\index{scatter}

shape (of a data structure)
:   A summary of the type, size, and composition of a data structure.
\index{shape}

singleton
:   A list (or other sequence) with a single element.
\index{singleton}

tuple
:   An immutable sequence of elements.
\index{tuple}

tuple assignment
:   An assignment with a sequence on the right side and a tuple of
    variables on the left. The right side is evaluated and then its
    elements are assigned to the variables on the left.
\index{tuple assignment}
\index{assignment!tuple}

Exercises
---------

**Exercise 1: Revise a previous program as follows: Read and parse the
"From" lines and pull out the addresses from the line. Count the number
of messages from each person using a dictionary.**

**After all the data has been read, print the person with the most commits
by creating a list of (count, email) tuples from the dictionary. Then
sort the list in reverse order and print out the person who has the most
commits.**

~~~~
Sample Line:
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008

Enter a file name: mbox-short.txt
cwen@iupui.edu 5

Enter a file name: mbox.txt
zqian@umich.edu 195
~~~~

**Exercise 2: This program counts the distribution of the hour of the day
for each of the messages. You can pull the hour from the "From" line by
finding the time string and then splitting that string into parts using
the colon character. Once you have accumulated the counts for each hour,
print out the counts, one per line, sorted by hour as shown below.**

~~~~
python timeofday.py
Enter a file name: mbox-short.txt
04 3
06 1
07 1
09 2
10 3
11 6
14 1
15 2
16 4
17 2
18 1
19 1
~~~~

**Exercise 3: Write a program that reads a file and prints the
*letters* in decreasing order of frequency. Your program
should convert all the input to lower case and only count the letters
a-z. Your program should not count spaces, digits, punctuation, or
anything other than the letters a-z. Find text samples from several
different languages and see how letter frequency varies between
languages. Compare your results with the tables at
<https://wikipedia.org/wiki/Letter_frequencies>.**

\index{letter frequency}
\index{frequency!letter}


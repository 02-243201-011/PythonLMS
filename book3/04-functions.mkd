
Funções
=========

Chamada de Função
--------------

\index{chamada de função}

No contexto da programação, uma *função* é a denominação dada à um
conjunto de instruções que realiza uma computação. Quando se define uma
função, você especifica o nome dela e a sequência de instruções. 
Posteriormente, você poderá "chamar" a função pelo seu nome. 
Neste livro, já haviamos visto um exemplo de *chamada de função*:

~~~~ {.python}
>>> type(32)
<class 'int'>
~~~~

O nome da função é `type`. A expressão em
parênteses é chamada de *argumento* da função. 
O argumento é um valor ou variável que estamos passando
para a função como entrada. 
O resultado, para a função `type`, é o tipo do argumento.

\index{parentheses!argumento entrada}

É comum dizer que uma função "leva" um argumento e "retorna" um
resultado. O resultado é chamado de *valor de retorno*.

\index{argumento}
\index{valor de retorno}

Funções internas
------------------

O Python fornece um bom número de funções internas importantes que nós 
podemos usar sem precisar defini-las. Os criadores do Python escreveram 
um conjunto de funções para alguns problemas comuns e as incluíram na 
própria linguagem para nosso uso.

A funções `max` e `min` nos dão o maior e o menor 
valores de uma lista, respectivamente:

~~~~ {.python}
>>> max('Alô mundo')
'ô'
>>> min('Alô mundo')
' '
>>>
~~~~

A função `max` nos diz qual é o "maior caractere" da string (que acaba sendo 
a letra "ô") e a função `min` nos mostra o menor caractere (que acaba sendo 
o espaço).

Outra função interna muito comum é a `len`, que diz quantos itens há em seu 
argumento. Caso este seja uma string, a função retorna o número de caracteres 
que a compõem.

~~~~ {.python}
>>> len('Alô mundo')
9
>>>
~~~~

Essas funções não são limitadas a analisar apenas strings. Elas podem
operar em qualquer conjunto de valores, assim como veremos em capítulos
posteriores.

Você deve encarar os nomes das funções internas como palavras reservadas 
(i.e., evite usar "max" como nome de variável).

Funções de conversão de tipo
-------------------------

\index{conversion!type}
\index{type conversion}

Python também fornece funções internas que convertem valores de um tipo para outro. A função `int` pega qualquer valor e
converte em um inteiro, se puder, ou reclama caso contrário:

\index{int function}
\index{function!int}

~~~ {.python}
>>> int('32')
32
>>> int('Olá')
ValueError: invalid literal for int() with base 10: 'Hello'
~~~

`int` pode converter valores de pontos-flutuante em inteiros, mas não arredonda;
corta a parte da fração:

~~~ {.python}
>>> int(3.99999)
3
>>> int(-2.3)
-2
~~~

`float` converte inteiros e strings em números de ponto-flutuante:

\index{float function}
\index{function!float}

~~~ {.python}
>>> float(32)
32.0
>>> float('3.14159')
3.14159
~~~

Finalmente, `str` converte seu argumento para uma string:

\index{str function}
\index{function!str}

~~~ 
{.python}
>>> str(32)
'32'
>>> str(3.14159)
'3.14159'
~~~~

Funções Matemáticas
--------------

\index{Funções matemáticas}
\index{matemáticas, funções}
\index{módulo}
\index{Objeto do módulo}

Python tem um módulo `math` que possui a maioria das funções matemáticas.
Antes de utilizar o módulo, nós temos que importá-lo:

~~~~ {.python}
>>> import math
~~~~

Essa declaração cria um *objeto do módulo* chamado math. Se você usar 
print() nele, receberá algumas informações sobre:

~~~~ {.python}
>>> print(math)
<module 'math' (built-in)>
~~~~

O objeto do módulo contém as funções e variáveis definidas no módulo.
Para acessar uma das funções, você deve especificar o nome do módulo e 
o da função, separados por um ponto (também conhecido como _period_).
Esse formato é conhecido como *notação de ponto*.

\index{dot notation}

~~~~ {.python}
>>> razao = poder_do_sinal / intensidade_de_ruido
>>> decibeis = 10 * math.log10(razao)

>>> radianos = 0.7
>>> height = math.sin(radianos)
~~~~

O primeiro exemplo computa o logaritmo de base 10 da razão entre o sinal
e o ruído. O módulo _math_ também fornece uma função chamada `log` que computa
logaritmos de base e.

\index{Função log}
\index{log!Função}
\index{Função seno}
\index{radiano}
\index{Função trigonométrica}
\index{trigonométrica, função}

O segundo exemplo encontra o seno de `radianos`. O nome da variável é uma
dica que `sin` e outras funções trigonométricas (`cos`, `tan`, etc.) têm 
argumentos em radianos. Para converter de graus para radianos, dividimos por 
360 e ultiplicamos por $2\pi$:

~~~~ {.python}
>>> graus = 45
>>> radianos = graus / 360.0 * 2 * math.pi
>>> math.sin(radianoss)
0.7071067811865476
~~~~

A expressão `math.pi` recebe a variável `pi` do módulo _math_. O valor dessa
variável é uma aproximação de $\pi$, com precisão de 15 dígitos.

\index{pi}

Se você sabe trigonometria, pode checar o resultado anterior comparando com a
raiz quadrada de 2 dividida por 2:

\index{Função sqrt}
\index{sqrt!Função}

~~~~ {.python}
>>> math.sqrt(2) / 2.0
0.7071067811865476
~~~~

Números Aleatórios
--------------

\index{número aleatório}
\index{número, aleatório}
\index{determinístico}
\index{pseudoaleatório}

Dadas as mesmas entradas, a maior parte dos prorgramas geram sempre as mesmas saídas, de forma que eles eles são ditos *determinísticos*. Determinismo é geralmente uma boa coisa, desde que nós esperamos o mesmo cálculo para se obter o mesmo resultado. Para algumas aplicações, porém, nós queremos que o computador seja imprevisível. Jogos são um exemplo óbvio, mas existem outros.

Criar um programa totalmente não determinístico não é tão fácil, mas há formas de que eles apareçam ser não determinísticos. Uma delas é utilizar *algorítmos* que geram *números pseudoaleatórios*. Números pseudoaleatórios não são verdadeiramente aleatórios, pois eles geram computação determinística, mas apenas olhando para os números é impossível distinguí-los deles de números aleatórios.

\index{módulo aleatório}
\index{módulo!aleatório}

The `random` module provides functions that generate
pseudorandom numbers (which I will simply call "random" from here on).

\index{random function}
\index{function!random}

A função `random` retorna um número float entre 0.0 e 1.0 (incluindo 0.0, mas não inclui 1.0). Todas as vezes que se chamar a função `random` você receberá o próximo número de uma série longa. Para ver uma amostra, rode esse loop

~~~~ {.python}
import random

for i in range(10):
    x = random.random()
    print(x)
~~~~
Este programa produz a lista a seguir de 10 números aleatórios entre 
0.0 e números maiores até um número menor do que 1.0.

~~~~
0.11132867921152356
0.5950949227890241
0.04820265884996877
0.841003109276478
0.997914947094958
0.04842330803368111
0.7416295948208405
0.510535245390327
0.27447040171978143
0.028511805472785867
~~~~

**Exercício 1: Rode o programa anterior no seu computador para ver quais números aparecem. 
Rode o programa mais uma vez e veja quais números aparecem.**

A função `random` é apenas uma das funções que utilizam números aleatórios. A função `randint` recebe dois parâmetros, dois números inteiros, e retorna um inteiro, que está pode estar entre ambos os números enviados como parâmetros (incluindo os próprios parâmetros).


\index{função randint }
\index{função!randint}

~~~~ {.python}
>>> random.randint(5, 10)
5
>>> random.randint(5, 10)
9
~~~~
Para escolher um elementeo de uma sequencia aleatoriamente você pode utilizar a função `choice`:

\index{função choice}
\index{função!choice}

~~~~ {.python}
>>> t = [1, 2, 3]
>>> random.choice(t)
2
>>> random.choice(t)
3
~~~~
O módulo `random` também disponibiliza funções para gerar valores aleatórios de acordo com distribuições contínuas, incluindo gaussianas, exponenciais, função gamma e algumas mais.

Adicionando novas funções
--------------------

Até agora, nós temos utilizado apenas as funções que já vêm com o Python, 
mas também é possível adicionar novas funções. Uma *definição de 
função* especifica o nome de uma nova função e a sequência de comandos 
que serão executados quando ela for chamada. Uma vez que nós definimos 
uma função, podemos reutilizá-la repetidas vezes ao longo do nosso 
programa:

\index{função}
\index{definição de função}
\index{definição!função}

Veja aqui um exemplo:

~~~~ {.python}
def print_LetraDaMusica():
    print("Eu sou um lenhador, e eu estou bem.")
    print('Eu durmo a noite toda e trabalho o dia todo.')
~~~~

`def` é uma palavra-chave que indica que isso é uma definição de função. O 
nome da função é `print_LetraDeMusica`. As regras para nomes de funções 
são as mesmas que para nomes de variáveis: letras, números e alguns sinais 
de pontuação são permitidos, mas o primeiro caractere não pode ser um 
número. Você não pode usar uma palavra-chave como nome de função, e 
você deve evitar ter uma variável e uma função com nomes iguais.

\index{palavra-chave def}
\index{palavra-chave!def}
\index{argumento}

Os parênteses vazios após o nome indicam que essa função não aceita 
argumentos. Mais tarde nós construiremos funções que levam argumentos 
como suas entradas. 

\index{parênteses!vazios}
\index{cabeçalho}
\index{corpo}
\index{indentação}
\index{dois pontos}

A primeira linha da definição da função é chamada de 
*cabeçalho*; o restante é o *corpo*.
O cabeçalho tem que encerrar com dois pontos e o
corpo tem que estar indentado. Por convenção, a endentação é sempre de
quatro espaços. O corpo pode conter qualquer número de comandos.


\index{reticências}

Se você fizer uma definição de função no modo interativo, o interpretador
usa reticências (*...*) para te informar que a definição não está completa:

~~~~ {.python}
>>> def print_LetraDeMusica():
...     print("Eu sou um lenhador, e eu estou bem.")
...     print('Eu durmo a noite toda e trabalho o dia todo.')
...
~~~~


Para finalizar a função, você precisa inserir uma linha em branco
(isso não é necessário no modo comum).

Definir uma função cria uma variável com o mesmo nome.

~~~~ {.python}
>>> print(print_LetraDeMusica)
<function print_ LetraDeMusica at 0xb7e99e9c>
>>> print(type(print_ LetraDeMusica))
<class 'function'>
~~~~

O valor da `print_LetraDeMusica` é um *objeto função*, o qual é do tipo
“function”.

\index{objeto função}
\index{objeto!função}

A sintaxe para chamar a nova função é a mesma que para funções internas:

~~~~ {.python}
>>> print_LetraDeMusica()
Eu sou um lenhador, e eu estou bem.
Eu durmo a noite toda e trabalho o dia todo.
~~~~

Uma vez que sua função está definida, você pode usá-la dentro de outra
função. Por exemplo, para repetir o refrão acima, nós poderíamos escrever
uma função chamada `repetir_LetraDeMusica`:

~~~~ {.python}
def repetir_LetraDeMusica():
    print_ LetraDeMusica()
    print_ LetraDeMusica()
~~~~

E depois chamar `repetir_LetraDeMusica`:

~~~~ {.python}
>>> repetir_LetraDeMusica()
Eu sou um lenhador, e eu estou bem.
Eu durmo a noite toda e trabalho o dia todo.
Eu sou um lenhador, e eu estou bem.
Eu durmo a noite toda e trabalho o dia todo.
~~~~

Mas não é bem assim que a música continua.

Definições e usos
--------------------

\index{definição de função}

Colocando junto os fragmentos de código da seção anterior, o programa
inteiro fica assim:

\VerbatimInput{../code3/lyrics.py}

Esse programa contém duas definições de função: `print_lyrics` e
`repeat_lyrics`. Definições de função são executadas assim como outras
declarações, mas o efeito é criar objetos de função. As declarações
dentro da função não são executadas até que a função seja chamada,
e a definição de função não gera saída.

\index{uso antes de def}

Como você deve imaginar, será necessário criar a função antes de poder
executá-la. Em outras palavras, a definição de função será executada
antes da primeira vez que seja chamada.

**Exercício 2: Mova a ultima linha desse programa para o início, assim a chamada
de função  aparece antes das definições. Execute o programa e veja
qual mensagem de erro aparece.**

**Exercício 3: Mova a chamada da função de volta ao final e mova a
definição de `print_lyrics` para depois da definição de `repeat_lyrics`.
O que acontece quando você executa esse programa?**

Fluxo de Execução
-----------------

\index{fluxo de execução}

Para garantir que a função é definida antes de seu primeiro uso, você
tem que saber a ordem que cada declaração é executada, o que é chamado
de *fluxo de execução*.

A execução sempre começa na primeira declaração do programa.
Declarações são executadas uma por vez, na ordem de cima para baixo.

*Definições* de função não alteram o fluxo da execução do
programa, mas lembram de que declarações dentro da função não são
executadas até que a função seja chamada.

Uma chamada de função é como um desvio no fluxo da execução. Em vez de
ir para a próxima declaração, o fluxo pula para o corpo da função,
executa todas as declarações ali, e então volta para onde
havia parado.

Isso parece bastante simples, até você lembrar que uma função pode chamar
outra. Enquanto estiver no meio de uma função, o programa pode ter que
executar as instruções em outra função. Então, enquanto estiver executando a nova
função, o programa pode ter que executar ainda outra função!

Felizmente, Python é bom em manter controle de onde está, então cada
vez que uma função é concluída o programa continua de onde parou na
função que o chamou. Quando chega ao fim do programa, se
encerra.

Qual é a moral desse conto sórdido? Quando você lê um programa, você nem
sempre quer lê-lo de cima para baixo. Às vezes faz mais sentido se
você seguir o fluxo de execução.

Parâmetros e argumentos
------------------------

\index{Parâmetro}
\index{Parâmetro de função}
\index{Argumento}
\index{Argumento de função}

Algumas das funções internas que vimos requerem argumentos. Por exemplo,
quando você chama `math.sin` você passa um número como argumento. Algumas
funções requerem mais de um argumento: `math.pow` recebe dois, a base e o
expoente.

Dentro da função, os argumentos são atribuidos à variáveis chamadas
*parâmetros*. Aqui está um exemplo de uma função definida pelo usuário
que recebe um argumento:

\index{parentheses!parameters in}

~~~~ {.python}
def mostra_duas_vezes(bruce):
    print(bruce)
    print(bruce)
~~~~

Essa função atribui o argumento à um parâmetro nomeado `bruce`. Quando
a função é chamada, ela mostra o valor do parâmetro (qualquer que seja
ele) duas vezes.

Essa função funciona com qualquer valor que possa ser mostrado.

~~~~ {.python}
>>> mostra_duas_vezes('Spam')
Spam
Spam
>>> mostra_duas_vezes(17)
17
17
>>> import math
>>> mostra_duas_vezes(math.pi)
3.141592653589793
3.141592653589793
~~~~

As mesmas regras de composição que se aplicam às funções internas também
se aplicam à funções definidas pelo usuário, então podemos usar qualquer 
tipo de expressão como argumento para `mostra_duas_vezes`:

\index{composição}

~~~~ {.python}
>>> mostra_duas_vezs('Spam '*4)
Spam Spam Spam Spam
Spam Spam Spam Spam
>>> mostra_duas_vezes(math.cos(math.pi))
-1.0
-1.0
~~~~

O argumento é avaliado antes da função ser chamada, então nos exemplos
as expressões `'Spam '*4` e `math.cos(math.pi)` são avaliadas apenas uma
vez.

\index{argumento}

Você também pode usar variáveis como argumento:

~~~~ {.python}
>>> michael = 'Eric, a meia abelha.'
>>> mostra_duas_vezes(michael)
Eric, a meia abelha.
Eric, a meia abelha.
~~~~

O nome da variávei que passamos como um argumento (`michael`)
não tem nada a ver com o nome do parâmetro (`bruce`). Não importa
como o valor é chamado em casa (na chamada da função); aqui em
`mostra_duas_vezes`, chamamos todo mundo de `bruce`.

Funções frutuosas e funções vazias
-------------------------------------

\index{função frutuosa}
\index{função vazia}
\index{função, frutuosa}
\index{função, vazia}

Algumas das funções que estamos usando, como as funções matemáticas, produzem
resultados; por falta de um nome melhor, eu os chamo funções frutuosas.
outras funções , como `print_twice`, executam uma
ação mas não retorne um valor. Elas são chamadas *funções
vazias*.

Quando você chama uma função frutuosa, você quase sempre quer fazer
alguma coisa com resultado; por exemplo, você pode atribui-lo a
uma variável ou usar-lo como parte de uma expressão:

~~ {.python}
x = math.cos(radians)
golden = (math.sqrt(5) + 1) / 2
~~

Quando você chama uma função no modo interativo, o Python exibe o resultado:

~~ {.python}
>>> math.sqrt(5)
2.23606797749979
~~

Mas em um script, se você chama uma função frutuosa e não armazena o
resultado da função em uma variável, o valor de retorno desaparece na névoa!

~~ {.python}
math.sqrt(5)
~~

Esse script calcula a raiz quadrada de 5, mas como não se armazena
o resultado em uma variável ou exibe o resultado, isso não foi muito útil.

\index{modo interativo}
\index{modo script}

Funções vazias podem exibir algo na tela ou ter algum outro efeito,
mas elas não têm um valor de retorno. Se você tentar atribuir o
resultado a uma variável, você obtém um valor especial chamado `None`.

\index{Valor especial none}
\index{valor especial!None}

~~ {.python}
>>> result = print_twice('Bing')
Bing
Bing
>>> print(result)
None
~~

O valor `None` não é o mesmo que uma string "None". Isto
é um valor especial que possui seu próprio tipo:

~~ {.python}
>>> print(type(None))
<class 'NoneType'>
~~

Para retornar um resultado de uma função, nós usamos o comando`return`
em nossa função. Por exemplo, nós podemos fazer uma função muito simples
chamada `addtwo` que soma dois números juntos e
retorna um resultado.

\VerbatimInput{../code3/addtwo.py}

Quando esse script é executado, a declaração ` print` será impressa
"8" porque a função `addtwo` foi chamada com 3 e 5
como argumentos. Dentro de uma função, os parâmetros `a` e
`b` eram 3 e 5 respectivamente. A função cálcula a soma
de dois números e colocou-o na váriável de função local nomeada
`added`. Então usou o comando `return` para
enviar o valor calculado de volta para o código de chamada como resultado da função,
o qual foi atribuido à variável `x` e impressa.




Por quê funções?
--------------

\index{function, reasons for}

Pode não parecer claro o motivo de dividir o programa em funções. Existem varias razões:

-   Criar uma nova função lhe dar a oportunidade de nomear um grupo de intruções, o que     torna seu programa mais fácil de ler, e depurar.

-   As funções podem tornar um programa menor eliminando as repetições. Mais tarde , se     você fizer uma mudança, só precisará mudar em um lugar.

-   dividindo um programa em funções permite que você depure as partes uma de cada vez e    ,em seguida, montá-las em um so trabalho.

-   Funções bem projetadas são muitas vezes úteis para muitos programas. Depois de           escrever e depurar um , você pode reutiliza-lo.

Ao longo do resto do livro, muitas vezes usaremos uma definição de função para explicar um conceito.  A  habilidade de criar e usar funções é ter uma função que capture a ideia corretamente, como "encontrar o menor valor em uma lista de valores". Mais tarde vamos mostrar-lhe o código que encontra o menor valor em uma lista de valores e vamos apresentá-lo para você como uma função chamada ' min ' que leva uma lista de valores como seu argumento e retorna o menor valor na lista.

Depuração 
---------

\index{debugging}

Se você estiver usando um editor de texto para escrever seus scripts, você pode encontrar problemas com espaços e guias. A melhor maneira de evitar esses problemas é usar espaços exclusivamente (sem guias). A maioria dos editores de texto que sabem sobre Python fazem isso por padrão, mas alguns não.

\index{whitespace}

Tabulações e espaços são geralmente invisíveis, o que os torna difíceis de depurar, então tente encontrar um editor que gerencia o recuo para você.

Além disso, não se esqueça de salvar seu programa antes de executá-lo. Alguns ambientes de desenvolvimento fazem isso automaticamente, mas alguns não. Nesse caso, o programa que você está olhando no editor de texto não é o mesmo que o programa que você está executando.

A depuração pode ser longa se você estiver executando o programa errado repetidamente!

Certifique-se de que o código que você está olhando é o código que você está executando. se você não tiver certeza, colocar algo como ' Print ("Olá") ' no início do programa e executá-lo novamente. Se você não vir ' Olá ', você não está executando o programa certo!


Glossary
--------

algorithm
:   A general process for solving a category of problems.
\index{algorithm}

argument
:   A value provided to a function when the function is called. This
    value is assigned to the corresponding parameter in the function.
\index{argument}

body
:   The sequence of statements inside a function definition.
\index{body}

composition
:   Using an expression as part of a larger expression, or a statement
    as part of a larger statement.
\index{composition}

deterministic
:   Pertaining to a program that does the same thing each time it runs,
    given the same inputs.
\index{deterministic}

dot notation
:   The syntax for calling a function in another module by specifying
    the module name followed by a dot (period) and the function name.
\index{dot notation}

flow of execution
:   The order in which statements are executed during a program run.
\index{flow of execution}

fruitful function
:   A function that returns a value.
\index{fruitful function}

function
:   A named sequence of statements that performs some useful operation.
    Functions may or may not take arguments and may or may not produce a
    result.
\index{function}

function call
:   A statement that executes a function. It consists of the function
    name followed by an argument list.
\index{function call}

function definition
:   A statement that creates a new function, specifying its name,
    parameters, and the statements it executes.
\index{function definition}

function object
:   A value created by a function definition. The name of the function
    is a variable that refers to a function object.
\index{function definition}

header
:   The first line of a function definition.
\index{header}

import statement
:   A statement that reads a module file and creates a module object.
\index{import statement}
\index{statement!import}

module object
:   A value created by an `import` statement that provides
    access to the data and code defined in a module.
\index{module}

parameter
:   A name used inside a function to refer to the value passed as an
    argument.
\index{parameter}

pseudorandom
:   Pertaining to a sequence of numbers that appear to be random, but
    are generated by a deterministic program.
\index{pseudorandom}

return value
:   The result of a function. If a function call is used as an
    expression, the return value is the value of the expression.
\index{return value}

void function
:   A function that does not return a value.
\index{void function}

Exercícios
---------

**Exercício 4: Qual a finlaidade da palavra-chave "def" em Python**

a\)É uma gíria que significa "o código a seguir é muito maneiro"\
b) Ela indica o começo de uma função\
c) Ela indica que a próxima seção indentada do código será guardada para mais tarde\
d) b e c são verdade\
e) Nenhuma das opções anteriores

**Exercício 5: O que o programa em Python a seguir mostrará em tela?**

~~~~ {.python}
def fred():
   print("Zap")

def jane():
   print("ABC")

jane()
fred()
jane()
~~~~

a\) Zap ABC jane fred jane\
b) Zap ABC Zap\
c) ABC Zap jane\
d) ABC Zap ABC\
e) Zap Zap Zap

**Exercício 6: Reescreve seu programa de cálculo de pagamento com um 1.5 o valor de hora de trabalho por hora extracrie uma função chamada `calculoPagamento` que aceita dois parâmetros(`horas` e `TaxaHora`)**

Rewrite your pay computation with time-and-a-half for
overtime and create a function called `computepay` which
takes two parameters (`hours` and `rate`).**

~~~~
Insira as Horas: 45
Insira o valor da Hora de Trabalho: 10
Pay: 475.0
~~~~

**Exercício 7: Reescreva o programa de notas do capítulo anterior usando a função `computarNotas`que recebe a pontuação como um parâmetro e retorna a nota como uma string.**

~~~~
Pontuação   Nota
>= 0.9       A
>= 0.8       B
>= 0.7       C
>= 0.6       D
 < 0.6       F
~~~~

~~~~
Insira a pontuação: 0.95
A
~~~~

~~~~
Insira a pontuação: perfect
Pontuação Inválida
~~~~

~~~~
Insira a pontuação: 10.0
Pontuação Inválida
~~~~

~~~~
Insira a pontuação: 0.75
C
~~~~

~~~~
Insira a pontuação: 0.5
F
~~~~

Execute o programa repetitivamente para testar vários valores diferentes como entrada.


Iteração
=========

\index{iteração}

Atualizando Variáveis
------------------

\index{atualizar}
\index{variável!atualizando}

Um modelo comum de declaração de atribuição é uma
que atualiza o valor de uma variável, onde 
o seu novo valor depende do seu anterior. 

~~~~ {.python}
x = x + 1
~~~~

Isso significa “pegue o valor atual de x, adicione 1 e 
então atualize x com este novo valor.” 

Se você tentar atualizar uma variável que não existe, ocorrerá
um erro, já que o Python avalia o lado direito da igualdade antes de atribuir
um valor a `x`:

~~~~ {.python}
>>> x = x + 1
NameError: name 'x' is not defined
           (nome ‘x’ não definido)
~~~~

Antes de se poder atualizar uma variável, é preciso 
*inicializá-la*, normalmente com uma simples atribuição: 

\index{inicialização (antes de atualizar)}

~~~~ {.python}
>>> x = 0
>>> x = x + 1
~~~~

Atualizar uma variável adicionando 1 é chamado de um *incremento*;
subtraindo 1 é chamado de um *decremento*.

\index{incremento}
\index{decremento}

A declaração `while`
--------------------------------

\index{declaração!while}
\index{laço while}
\index{laço!while}
\index{iteração}

Frequentemente, computadores são utilizados para automatizar tarefas
repetitivas. Repetir tarefas, idênticas ou similares, sem cometer erros,
é algo que computadores fazem bem melhor que pessoas. Devido à iteração 
ser tão comum, Python disponibiliza diversos recursos para torná-la mais
fácil. 

Uma das formas de iteração em Python é a declaração `while`. Abaixo, temos 
um programa simples que faz uma contagem regressiva, partindo de cinco, e 
depois diz "Lançar!".

~~~~ {.python}
n = 5
while n > 0:
    print(n)
    n = n - 1
print('Lançar!')
~~~~

A declaração `while` quase pode ser lida como se fosse um texto comum (escrito
em inglês). Em português teríamos algo como: "Enquanto `n` for maior 
que 0, mostre o valor de `n` e então subtraia 1 deste valor. Quando
atingir o valor 0, saia da declaração `while` e mostre 
a palavra `Lançar!`".

\index{fluxo de execução}

De forma mais formal, o fluxo de execução da declaração `while`
seria:

1.	Análise da condição, retornando um valor `True` 
    ou `False`.

2.	Se a condição for falsa, saia da declaração `while`
    e prossiga com as declarações seguintes.
    
3.	Se a condição for verdadeira, execute o bloco `while`
    e então retorne ao passo 1.
    
Este bloco de instruções é chamado de *laço*, pois o terceiro
passo faz retornar ao primeiro. Nomeamos de *iteração* cada vez em que as 
instruções dentro de um laço são executadas. 
Para o programa anterior, podemos dizer que “ele teve cinco iterações”,
ou seja, o corpo do laço foi executado cinco vezes.	

\index{condição}
\index{laço}
\index{corpo}

O corpo do laço normalmente deve alterar o valor de uma ou mais
variáveis, de forma que, eventualmente, a condição de execução 
se torne falsa e a repetição se encerre. Chamamos esta variável que tem
seu valor alterado em cada execução do laço e controla quando ele
deve terminar de *variável de iteração*. Se não houver uma
variável de iteração, o loop se repetirá eternamente, resultando
em um *laço infinito*.

Laços infinitos
--------------

Uma fonte de diversão sem fim para programadores é observar que
as instruções no shampoo, “Ensaboe, enxague, repita”, são um laço infinito
pois não há *variável de iteração* lhe dizendo quantas
vezes executar essa sequência.

\index{laço infinito}
\index{laço!infinito}

Numa `contagem regressiva`, nós podemos provar que o laço
termina, pois sabemos que o valor de `n` é finito,
e podemos ver que esse valor fica cada vez menor
durante o laço, então eventualmente chegaremos ao 0. Outras vezes, um laço
é claramente infinito, pois não existe variável de iteração.

\index{estrutura break}
\index{estrutura!break}

Às vezes você não sabe que é hora de terminar o laço até chegar ao meio
dele. Nesse caso você pode escrever um laço infinito de propósito
e então usar o comando `break` para interrompê-lo.

Este laço abaixo é obviamente um *laço infinito*, pois a
expressão lógica na estrutura `while` é simplesmente a
a constante lógica `True`:

~~~~ {.python}
n = 10
while True:
    print(n, end=' ')
    n = n - 1
print('Pronto!')
~~~~

Se você cometer o erro de executar esse código, você aprenderá rapidamente como
parar um processo do Python em execução no seu sistema ou achar onde é o botão
de desligar do seu computador. Esse programa rodará eternamente ou até a sua
bateria acabar, pois a expressão lógica no topo do laço
é sempre verdadeira, graças ao fato de que a expressão é o valor
constante `True`.

Embora isso seja um laço infinito disfuncional, nós podemos continuar usando esse
padrão para construir laços úteis, desde que, cuidadosamente, adicionemos um código ao
corpo do laço que, utilizando `break`, explicitamente saia dele
quando atingimos a condição de saída desejada.

Por exemplo, suponha que você queira entradas do usuário até que
ele digite `pronto`. Você pode escrever:

\VerbatimInput{../code3/copytildone1.py}

A condição do laço é `True`, que sempre é verdadeiro, então ele
é executado repetidamente até atingir a estrutura break.

A cada repetição, ele solicita uma entrada do usuário mostrando um sinal de “menor que”.
Se o usuário digita `pronto`, o comando `break` sai do
laço. Caso contrário o programa ecoa tudo o que o usuário digita e volta para o 
primeiro passo. Aqui vemos um exemplo da execução:

~~~~
> olá
olá
> encerrar
encerrar
> pronto
Pronto!
~~~~

Esta forma de escrever laços `while` é comum, pois você pode
checar a condição em qualquer lugar do bloco (não apenas no topo) e você
pode expressar a condição de parada afirmativamente (“pare quando isso acontece”)
melhor do que negativamente (“continue até que aquilo aconteça”).

Finalizando iterações com `continue`
-----------------------------------------------

\index{estrutura continue}
\index{estrutura!continue}

Às vezes, você está em uma iteração de um laço e deseja finalizar esta
iteração atual e pular imediatamente para a próxima. Nesse
caso, você pode usar o comando `continue` para avançar para a próxima
iteração, sem executar as instruções restantes da iteração
atual.

Aqui está um exemplo de laço que copia as entradas do usuário até ele digitar
"pronto", mas considera as linhas que começam com o 
caractere cerquilha (#) como linhas que não devem
ser exibidas (como os comentários em Python).

\VerbatimInput{../code3/copytildone2.py}

Aqui temos um exemplo da execução desse novo programa com `continue`
adicionado.

~~~~ 
> ola
ola
> # não exiba isso
> exiba isso!
exiba isso!
> pronto
Pronto!
~~~~

Todas as linhas são exibidas, exceto a que começa com o sinal cerquilha,
pois quando o `continue` é executado, ele termina a iteração
atual e pula de volta para o topo do bloco `while` para começar
a próxima iteração, pulando, portanto, o comando `print`.


Definindo um laço usando `for` 
--------------------------------------

\index{for statement}
\index{statement!for}

Às vezes, queremos fazer um loop através de um conjunto de coisas, como uma lista de palavras, linhas em um arquivo, ou uma lista de números. Quando temos uma lista de coisas para um loop, podemos construir um definitivo usando uma declaração ' for '.  Nós chamamos a instrução ' While ' na loop indefinido porque ele simplesmente permanece em loop até que alguma condição se torne ' falsa ', enquanto o loop ' for ' é  um conjunto de argumentos ou itens que ele executado através de iterações.

A sintaxe de um ‘ for ‘ é similar à do ‘while’  em que há uma condição e um corpo de repetição:

~~~~ {.python}
Amigos = [‘Jose’, ‘Gleice’, ‘Sara’]
For amigo in amigos:
    print('Feliz ano novo',amigo)   
print('Feito !')

~~~~

Em termos Python, a variável ' amigos ' é uma lista  [examinaremos as listas com mais detalhes em um capítulo posterior.] de três cadeias de caracteres e o loop ' for ' passa pela lista e executa o corpo uma vez para cada uma das três cadeias de caracteres na lista, resultando nesta saída :

~~~~ {.python}
Feliz ano novo: Jose
Feliz ano novo: Gleice
Feliz ano novo: Sara
Feito!
~~~~

Traduzir este loop 'for' para o portuquês não é tão direto quanto
o ' While ', mas se você pensar em amigos como um
* conjunto *, ele vai como este: "executar as instruções no corpo
do 'for' uma vez para cada amigo * in * conjunto de amigos nomeados. "

Olhando para o loop 'for', * for * e
* in * são palavras-chave do Python reservadas e
' amigo ' e ' amigos ' são variáveis

~~~~ {.python}
for amigo in amigos:
    Print (' feliz ano novo: ', amigo)
~~~~

Em particular, ' amigo ' é a * iteração da
variável * para o loop for. A variável ' amigo '
causa uma interação para cada loop e controla o loop' for 'quando  é concluído. A * variável  * passos sucessivamente através das três condições armazenadas na
variável 'amigos'.

Padrões de loop
-------------

Muitas vezes usamos um loop ' for ' ou ' While ' para percorrer
uma lista de itens, o conteúdo de um arquivo ou procuramos
algo como o maior ou menor valor dos dados que Digitalizamos.

Esses loops são geralmente construídos por:

-Inicializando uma ou mais variáveis antes que o loop comece

-Realizando algum cálculo em cada item no corpo do loop, possivelmente
    alterando as variáveis no corpo do loop

-Olhando para as variáveis resultantes quando o loop é concluído

Utilizaremos uma lista de números para demonstrar os conceitos e
construção destes padrões de loop.

### Contando e Somando Repetições

Por exemplo, para contar o número de itens em uma lista, escreveríamos o seguinte para a repetição usando `for`:

~~~~ {.python}
count = 0
for itervar in [3, 41, 12, 9, 74, 15]:
    count = count + 1
print('Count: ', count)
~~~~
Nós ajustamos `count`  para zero antes da repetição começar, então nós escrevemos uma repetição `for` para percorrer a lista de números. Nossa variável de *iteração* é chamada de `itervar` e enquanto nós não usamos o `itervar` na repetição, ele controla o loop e faz com que o corpo desta parte do código seja executada uma vez para cada um dos valores na lista.
 
No corpo da repetição, adicionamos 1 ao valor atual de `count`  para cada um dos valores na lista. Enquanto o loop está em execução, o valor de `count` é o número de valores que vimos "até agora". 
 
Depois que a repetição é concluída, o valor de `count` é o número total de itens. O  número total "cai do céu" no final do ciclo. Nós construímos a repetição e então temos o que queremos quando ela termina.
 
Outra repetição semelhante que calcula o total de um conjunto de números é o seguinte

~~~~ {.python}
total = 0
for itervar in [3, 41, 12, 9, 74, 15]:
    total = total + itervar
print('Total: ', total)
~~~~

Neste loop, *usamos* a *variável de iteração*. Em vez de simplesmente adicionar um à `contagem`, como na repetição anterior, adicionamos o número real (3, 41, 12, etc.) ao executando total durante cada iteração de repetição. Se você pensar na variável `total`, ela contém o "total de valores executados até agora". Então, antes que a repetição comece,`total` é zero porque ainda não vimos nenhum valor. Durante toda a repetição `total`  é compilado e, ao final do loop, `total` é o valor geral de todos os valores na lista.
 
Conforme o loop é executado, `total` acumula a soma dos elementos; uma variável usada desta forma às vezes é chamada de *accumulator*.

\index{accumulator!sum}

Nem a repetição de contagem nem a repetição de soma são particularmente úteis na prática porque existem funções internas `len()` e
`sum()` que calculam o número de itens em uma lista e o total dos itens na lista, respectivamente.


### Repetições Máximas e Mínimas

\index{loop!maximum}
\index{loop!minimum}
\index{None special value}
\index{special value!None}

Para achar o máximo valor em uma lista ou sequência, construímos a seguinte repetição:

~~~~ {.python}
largest = None
print('Before:', largest)
for itervar in [3, 41, 12, 9, 74, 15]:
    if largest is None or itervar > largest :
        largest = itervar
    print('Loop:', itervar, largest)
print('Largest:', largest)
~~~~

Quando o programa é executado, a saída é a seguinte:

~~~~
Before: None
Loop: 3 3
Loop: 41 41
Loop: 12 41
Loop: 9 41
Loop: 74 74
Loop: 15 74
Largest: 74
~~~~

A variável `largest` é melhor considerada como o “maior valor que vimos até agora”. Antes da repetição, definimos `largest` para a constante `None`. `None` é uma constante especial de valor que podemos armazenar em uma variável para marca-la como "vazia".

Antes do início da repetição, o maior valor que temos até agora é `None`, desde que nós ainda não tenhamos nenhum valor. Enquanto a repetição está sendo executada, se o `maior` for `None`, então nós pegamos o primeiro valor que vemos como o maior até agora. Você pode ver na primeira iteração quando o valor do `itervar` é 3, já que `largest` é `None`, nós imediatamente definimos `largest` como sendo 3.

Após a primeira iteração, `largest` não é mais `None`, então a segunda parte da expressão lógica composta verifica se `itervar > largest` acionando apenas quando vemos que um valor que é maior que o "maior até agora". Quando vemos um novo "mesmo maior ”valorizamos esse novo valor para o `largest`. Você pode ver na saída do programa que `largest` progride de 3 para 41 e de 41 para 74.

No final da repetição, verificamos todos os valores e a variável `largest` agora contém o maior valor da lista.

Para calcular o menor número, o código é muito semelhante com uma pequena alteração:

~~~~ {.python}
smallest = None
print('Before:', smallest)
for itervar in [3, 41, 12, 9, 74, 15]:
    if smallest is None or itervar < smallest:
        smallest = itervar
    print('Loop:', itervar, smallest)
print('Smallest:', smallest)
~~~~

Novamente, `smallest` é o “menor até agora” antes, durante e depois que a repetição é executada.
Quando a repetição está concluída, `smallest` contém o valor mínimo na lista.
 
Novamente como na contagem e na soma, as funções incorporadas `max()` e `min()` fazem o mesmo sem escrever esses laços desnecessários.
 
A seguir, uma versão simples da função `min()` embutida do Python:

~~~~ {.python}
def min(values):
    smallest = None
    for value in values:
        if smallest is None or value < smallest:
            smallest = value
    return smallest
~~~~

Na versão de função do menor código, removemos todas as declarações de `print`, de  modo a ser equivalente à função `min` que já está embutida no Python.

Debugging 
-------------
Ao começar a escrever programas maiores, você pode se encontrar gastando muito tempo com depuração. Mais código significa mais chances de cometer um erro e mais lugares para ocultar erros.

\index{debugging!por bisseção}
\index{bisseção, debugging}

Um modo de reduzir seu tempo de depuração é "depuração por bisseção". Por exemplo, se existes 100 linhas em seu programa e você verifica um de cada vez, levaria 100 passos.
Em vez disso, experimente quebrar o problema pela metade. Olhe para o meio do programa, ou perto dele, para um valor intermediário que você pode verificar.  Adicione o comando `print` (ou alguma outra coisa que tenha um efeito verificável ) e execute o programa.
Se a verificação no ponto médio estiver incorreta, o problema deve estar na primeira metade do programa, se está correto, o problema está na segunda metade.
Toda vez que você faz um teste como esse, você reduz o número de linhas que você tem que pesquisar. Após seis passos (o que é muito menos que 100), você ficaria com uma ou duas linhas de código, pelo menos em teoria.
Na prática isso nem sempre é claro o que é o "meio do programa" e nem sempre é possível verifica-lo. Não faz sentido contar linhas e encontrar o ponto médio exato. Em vez disso pense sobre lugares no programa onde pode haver erros e lugares onde é fácil fazer um teste. Em seguida escolha um ponto em que você acha que as chances são as mesmas que o erro esteja antes ou depois do teste.

Glossário
---------

Acomulador: Uma variável usada em um loop para adicionar ou acumular um resultado. \index{acumulador}
Contador: Uma variável usada em um loop para contar o número de vezes que alguma coisa aconteceu. Nós inicializamos um contador em zero e incrementamos o contador cada vez que queremos "contar" alguma coisa. \index{contador}
Decremento : Uma atualização que diminuiu o valor de uma variável. \index{decremento}
Inicializar: Uma atribuição que fornece um valor para uma variável que vai ser atualizada.
Incremento: Uma atualização que aumenta o valor de uma variável ( geralmente em um ) . \index{incremento}
Loop infinito:  Um loop no qual a condição de término nunca é satisfeita, ou para qual não existe condição de término. \index{ loop infinito}
Iteração: Execução repetida de um conjunto de instruções usando uma função que chama a si mesma ou um loop. \index {Iteração}


Exercícios
---------

**Exercício 1: Escreva um programa que repetitivamente lê números até que o usuário digite "feito". Desde que "feito" é digitado, mostre a soma total, a quantidade e a médida dos números digitados. Se o usuário digitar qualquer coisa que não seja um número, detecte o erro usando o `try`e o `except` e mostre na tela uma mensagem de erro e pule para o próximo número.**

~~~~
Digite um número: 4
Digite um número: 5
Digite um número: dado errado
Entrada Inválida
Digite um número: 7
Digite um número: feito
16 3 5.333333333333333
~~~~

**Exercise 2: Escreva outro programa que pede por uma lista de números como o falado acima e no final ele mostra 
o máximo e o mínimo dos números ao invés da média.**


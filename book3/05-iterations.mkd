
Iteração
=========

\index{iteration}

Atualizando Variáveis
------------------

\index{update}
\index{variable!updating}

Um modelo comum ao declarar atribuições é uma declaração
de atribuição que atualiza o valor de uma variável, onde 
o novo valor dessa variável depende do seu anterior. 

~~~~ {.python}
x = x + 1
~~~~

Isso significa “pegue o valor atual de x, adicione 1 e 
então atualize x com este novo valor.” 

Se você tentar atualizar uma variável que não existe, ocorrerá
um erro, já que Python avalia o lado direito antes de atribuir
um valor a `x`:

~~~~ {.python}
>>> x = x + 1
NameError: name 'x' is not defined
~~~~

Antes de se poder atualizar uma variável, é preciso 
*inicializá-la*, normalmente com uma simples atribuição: 

\index{initialization (before update)}

~~~~ {.python}
>>> x = 0
>>> x = x + 1
~~~~

Atualizar uma variável adicionando 1 é chamado de um *incremento*;
subtraindo 1 é chamado de um *decremento*.

\index{increment}
\index{decrement}

A declaração `while`
--------------------------------

\index{statement!while}
\index{while loop}
\index{loop!while}
\index{iteration}

Computadores com frequência são utilizados para automatizar tarefas
repetitivas. Repetir tarefas, idênticas ou similares, sem cometer erros,
é algo que computadores fazem bem melhor que pessoas. Devido à iteração 
ser tão comum, Python disponibiliza diversos recursos para torná-la mais
fácil. 

Uma das formas de iteração em Python é a declaração `while`. Abaixo, temos 
um programa simples que faz a contagem regressiva, partindo de cinco, e 
então diz "Lançar!".

~~~~ {.python}
n = 5
while n > 0:
    print(n)
    n = n - 1
print('Lançar!')
~~~~

A declaração `while` quase pode ser lida como se tivesse sido escrita
em inglês. Em português teríamos algo como: "Enquanto `n` for maior 
que 0, mostre o valor de `n` e então subtraia 1 deste valor. Quando
atingir o valor 0, saia da declaração `while` e mostre 
a palavra  `Lançar!`".

\index{flow of execution}

De forma mais formal, o fluxo de execução da declaração `while`
seria:

1.	Análise da condição, retornando um valor `True` 
    ou `False`.

2.	Se a condição for falsa, saia da declaração `while`
    e prossiga com as declarações seguintes.
    
3.	Se a condição for verdadeira, execute o bloco `while`
    e então retorne ao passo 1.
    
Este bloco de instruções é chamado de *loop*, pois o terceiro
passo faz retornar ao primeiro. Nomeamos cada vez que as 
instruções dentro de um loop são executadas de *iteração*. 
Para o loop acima, podemos dizer que “ele teve cinco iterações”,
ou seja, o corpo do loop foi executado cinco vezes.	

\index{condition}
\index{loop}
\index{body}

O corpo do loop normalmente deve alterar o valor de uma ou mais
variáveis de forma que, eventualmente, a condição de execução 
se torne falsa e o loop se encerre. Chamamos a variável que tem
seu valor alterado em cada execução do loop e controla quando o
loop deve terminar de *variável de iteração*. Se não houver uma
variável de iteração, o loop se repetirá eternamente, resultando
em um *loop infinito*.

Loops infinitos
--------------

Uma fonte de diversão sem fim para programadores é a observação de que
as instruções no shampoo, “Ensaboe, enxague, repita”, são um loop infinito
infinito pois não há *variável de iteraação* lhe dizendo quantas
vezes executar o loop.

\index{loop infinito}
\index{loop!infinito}

No caso de `countdown`, nós podemos provar que o loop
termina, pois sabemos que o valor de `n` é finito,
ae podemos ver o valor de `n` gficar cada vez menor
durante o loop, então eventualmente teremos o 0. Outras vezes o loop
é obviamente infinito, pois não existe variável de iteração.

\index{estrutura break}
\index{estrutura!break}

Às vezes você não sabe que é hora de terminar o loop até chegar ao meio
do código. Nesse caso você pode escrever um loop infinito de propósito
e então usar a estrutura `break` para sair do loop.

Este loop obviamente é um *loop infinito*, pois a
expressão lógica na estrutura `while` é simplesmente a
a constante lógica `True`:

~~~~ {.python}
n = 10
while True:
    print(n, end=' ')
    n = n - 1
print('Pronto!')
~~~~

Se você cometer o erro e executar esse código, você aprenderá rapidamente como
parar o processo de Python em execução no seu sistema ou achar onde é o botão
de desligar do seu computador. Este programa rodará eternamente ou até a sua
bateria acabar, pois a expressão lógica no topo do loop
é sempre verdadeira graças ao fato de que a expressão é o valor
constante `True`.

Enquanto isso é um loop infinito disfuncional, nós podemos continuar usando esse
padrão para construir loops uteis desde que, cuidadosamente adicionemos o código ao
corpo do loop para sair dele explicitamente usando `break`
quando atingimos a condição de saída.

Por exemplo, suponha que você queira entradas do usuário até que
digitem `done`. Você pode escrever:

\VerbatimInput{../code3/copytildone1.py}

A condição do loop é `True`, que sempre é verdadeiro, então o
loop executa repetidamente até atingir a estrutura break.

A cada vez, ele solicita o usuário com um colchete angular. Se o
usuário digita `done`, a estrutura `break` sai do
loop. Caso contrário o programa ecoa tudo o que o usuário digita e volta ao início
do loop. Aqui vemos a execução de uma amostra:

~~~~
> ola
ola
> encerrado
encerrado
> pronto
Pronto!
~~~~

Esta forma de escrever loops `while` é comum, pois você pode
checar a condição em qualquer lugar do loop (não apenas no topo) e você
pode expressar a condição de parada afirmativamente (“pare quando isso acontece”)
melhor que negativamente (“continue até que aquilo aconteça”).

Finalizando iterações com `continue`
-----------------------------------------------

\index{estrutura continue}
\index{estrutura!continue}

Às vezes você está em uma iteração de um loop e deseja finalizar a
iteração atual e pular imediatamente para a próxima. Nesse
caso você pode usar a estrutura `continue` para avançar para a próxima
iteração sem terminar o corpo do loop para a iteração
atual.

Aqui está um exemplo de loop que copia suas entradas até o usuário digitar
"pronto", considera linhas que comecem com o caractere cerquilha como linhas a não
serem exibidas (Como os comentários em Python)

\VerbatimInput{../code3/copytildone2.py}

Aqui temos a execução da amostra desse novo programa com `continue`
adicionado.

~~~~ 
> ola
ola
> # não exiba isso
> exiba isso!
Exiba isso!
> pronto
Pronto!
~~~~

Todas as linhas são exibidas exceto a que começa com o sinal cerquilha,
pois quando o `continue` é executado, ele termina a iteração
atual e pula de volta para a estrutura `while` para começar
a próxima iteração, portanto pulando o `print`.

Definindo loop usando `for` 
--------------------------------------

\index{for statement}
\index{statement!for}

Às vezes, queremos fazer um loop através de um conjunto de coisas, como uma lista de palavras, linhas em um arquivo, ou uma lista de números. Quando temos uma lista de coisas para um loop, podemos construir um definitivo usando uma declaração ' for '.  Nós chamamos a instrução ' While ' na loop indefinido porque ele simplesmente permanece em loop até que alguma condição se torne ' falsa ', enquanto o loop ' for ' é  um conjunto de argumentos ou itens que ele executado através de iterações.

A sintaxe de um ‘ for ‘ é similar à do ‘while’  em que há uma condição e um corpo de repetição:

~~~~ {.python}
Amigos = [‘Jose’, ‘Gleice’, ‘Sara’]
For amigo in amigos:
    print('Feliz ano novo',amigo)   
print('Feito !')

~~~~

Em termos Python, a variável ' amigos ' é uma lista  [examinaremos as listas com mais detalhes em um capítulo posterior.] de três cadeias de caracteres e o loop ' for ' passa pela lista e executa o corpo uma vez para cada uma das três cadeias de caracteres na lista, resultando nesta saída :

~~~~ {.python}
Feliz ano novo: Jose
Feliz ano novo: Gleice
Feliz ano novo: Sara
Feito!
~~~~

Traduzir este loop 'for' para o portuquês não é tão direto quanto
o ' While ', mas se você pensar em amigos como um
* conjunto *, ele vai como este: "executar as instruções no corpo
do 'for' uma vez para cada amigo * in * conjunto de amigos nomeados. "

Olhando para o loop 'for', * for * e
* in * são palavras-chave do Python reservadas e
' amigo ' e ' amigos ' são variáveis

~~~~ {.python}
for amigo in amigos:
    Print (' feliz ano novo: ', amigo)
~~~~

Em particular, ' amigo ' é a * iteração da
variável * para o loop for. A variável ' amigo '
causa uma interação para cada loop e controla o loop' for 'quando  é concluído. A * variável  * passos sucessivamente através das três condições armazenadas na
variável 'amigos'.

Padrões de loop
-------------

Muitas vezes usamos um loop ' for ' ou ' While ' para percorrer
uma lista de itens, o conteúdo de um arquivo ou procuramos
algo como o maior ou menor valor dos dados que Digitalizamos.

Esses loops são geralmente construídos por:

-Inicializando uma ou mais variáveis antes que o loop comece

-Realizando algum cálculo em cada item no corpo do loop, possivelmente
    alterando as variáveis no corpo do loop

-Olhando para as variáveis resultantes quando o loop é concluído

Utilizaremos uma lista de números para demonstrar os conceitos e
construção destes padrões de loop.

### Counting and summing loops

For example, to count the number of items in a list, we would write the
following `for` loop:

~~~~ {.python}
count = 0
for itervar in [3, 41, 12, 9, 74, 15]:
    count = count + 1
print('Count: ', count)
~~~~

We set the variable `count` to zero before the loop starts,
then we write a `for` loop to run through the list of
numbers. Our *iteration* variable is named
`itervar` and while we do not use `itervar` in the
loop, it does control the loop and cause the loop body to be executed
once for each of the values in the list.

In the body of the loop, we add 1 to the current value of
`count` for each of the values in the list. While the loop is
executing, the value of `count` is the number of values we
have seen "so far".

Once the loop completes, the value of `count` is the total
number of items. The total number "falls in our lap" at the end of the
loop. We construct the loop so that we have what we want when the loop
finishes.

Another similar loop that computes the total of a set of numbers is as
follows:

~~~~ {.python}
total = 0
for itervar in [3, 41, 12, 9, 74, 15]:
    total = total + itervar
print('Total: ', total)
~~~~

In this loop we *do* use the *iteration variable*.
Instead of simply adding one to the `count` as in the
previous loop, we add the actual number (3, 41, 12, etc.) to the running
total during each loop iteration. If you think about the variable
`total`, it contains the "running total of the values so
far". So before the loop starts `total` is zero because we
have not yet seen any values, during the loop `total` is the
running total, and at the end of the loop `total` is the
overall total of all the values in the list.

As the loop executes, `total` accumulates the sum of the
elements; a variable used this way is sometimes called an
*accumulator*.

\index{accumulator!sum}

Neither the counting loop nor the summing loop are particularly useful
in practice because there are built-in functions `len()` and
`sum()` that compute the number of items in a list and the
total of the items in the list respectively.

### Maximum and minimum loops

\index{loop!maximum}
\index{loop!minimum}
\index{None special value}
\index{special value!None}

To find the largest value in a list or sequence, we
construct the following loop:

~~~~ {.python}
largest = None
print('Before:', largest)
for itervar in [3, 41, 12, 9, 74, 15]:
    if largest is None or itervar > largest :
        largest = itervar
    print('Loop:', itervar, largest)
print('Largest:', largest)
~~~~

When the program executes, the output is as follows:

~~~~
Before: None
Loop: 3 3
Loop: 41 41
Loop: 12 41
Loop: 9 41
Loop: 74 74
Loop: 15 74
Largest: 74
~~~~

The variable `largest` is best thought of as the "largest
value we have seen so far". Before the loop, we set `largest`
to the constant `None`. `None` is a special
constant value which we can store in a variable to mark the variable as
"empty".

Before the loop starts, the largest value we have seen so far is
`None` since we have not yet seen any values. While the loop
is executing, if `largest` is `None` then we take
the first value we see as the largest so far. You can see in the first
iteration when the value of `itervar` is 3, since
`largest` is `None`, we immediately set
`largest` to be 3.

After the first iteration, `largest` is no longer
`None`, so the second part of the compound logical expression
that checks `itervar > largest` triggers only when we see a
value that is larger than the "largest so far". When we see a new "even
larger" value we take that new value for `largest`. You can
see in the program output that `largest` progresses from 3 to
41 to 74.

At the end of the loop, we have scanned all of the values and the
variable `largest` now does contain the largest value in the
list.

To compute the smallest number, the code is very similar with one small
change:

~~~~ {.python}
smallest = None
print('Before:', smallest)
for itervar in [3, 41, 12, 9, 74, 15]:
    if smallest is None or itervar < smallest:
        smallest = itervar
    print('Loop:', itervar, smallest)
print('Smallest:', smallest)
~~~~

Again, `smallest` is the "smallest so far" before, during,
and after the loop executes. When the loop has completed,
`smallest` contains the minimum value in the list.

Again as in counting and summing, the built-in functions
`max()` and `min()` make writing these exact loops
unnecessary.

The following is a simple version of the Python built-in
`min()` function:

~~~~ {.python}
def min(values):
    smallest = None
    for value in values:
        if smallest is None or value < smallest:
            smallest = value
    return smallest
~~~~

In the function version of the smallest code, we removed all of the
`print` statements so as to be equivalent to the
`min` function which is already built in to Python.

Debugging
---------

As you start writing bigger programs, you might find yourself spending
more time debugging. More code means more chances to make an error and
more places for bugs to hide.

\index{debugging!by bisection}
\index{bisection, debugging by}

One way to cut your debugging time is "debugging by bisection." For
example, if there are 100 lines in your program and you check them one
at a time, it would take 100 steps.

Instead, try to break the problem in half. Look at the middle of the
program, or near it, for an intermediate value you can check. Add a
`print` statement (or something else that has a verifiable
effect) and run the program.

If the mid-point check is incorrect, the problem must be in the first
half of the program. If it is correct, the problem is in the second
half.

Every time you perform a check like this, you halve the number of lines
you have to search. After six steps (which is much less than 100), you
would be down to one or two lines of code, at least in theory.

In practice it is not always clear what the "middle of the program" is
and not always possible to check it. It doesn't make sense to count
lines and find the exact midpoint. Instead, think about places in the
program where there might be errors and places where it is easy to put a
check. Then choose a spot where you think the chances are about the same
that the bug is before or after the check.

Glossary
--------

accumulator
:   A variable used in a loop to add up or accumulate a result.
\index{accumulator}

counter
:   A variable used in a loop to count the number of times something
    happened. We initialize a counter to zero and then increment the
    counter each time we want to "count" something.
\index{counter}

decrement
:   An update that decreases the value of a variable.
\index{decrement}

initialize
:   An assignment that gives an initial value to a variable that will be
    updated.

increment
:   An update that increases the value of a variable (often by one).
\index{increment}

infinite loop
:   A loop in which the terminating condition is never satisfied or for
    which there is no terminating condition.
\index{infinite loop}

iteration
:   Repeated execution of a set of statements using either a function
    that calls itself or a loop.
\index{iteration}

Exercícios
---------

**Exercício 1: Escreva um programa que repetitivamente lê números até que o usuário digite "feito". Desde que "feito" é digitado, mostre a soma total, a quantidade e a médida dos números digitados. Se o usuário digitar qualquer coisa que não seja um número, detecte o erro usando o `try`e o `except` e mostre na tela uma mensagem de erro e pule para o próximo número.**

~~~~
Digite um número: 4
Digite um número: 5
Digite um número: dado errado
Entrada Inválida
Digite um número: 7
Digite um número: feito
16 3 5.333333333333333
~~~~

**Exercise 2: Escreva outro programa que pede por uma lista de números como o falado acima e no final ele mostra 
o máximo e o mínimo dos números ao invés da média.**

